%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Xara X
%%For: (Unregistered user) (Unregistered company)
%%Title: (architeture.xar)
%%CreationDate: (11/05/11) (03:52 AM)
%%BoundingBox: 92 40 506 421
%%HiResBoundingBox: 92.398 40.458 505.185 420.280
%%AWColourTable
%%+h (Red) 0.0 100.0 100.0
%%+h (Orange-Red) 15.0 100.0 100.0
%%+h (Orange) 30.0 100.0 100.0
%%+h (Orange-Yellow) 45.0 100.0 100.0
%%+h (Yellow) 60.0 100.0 100.0
%%+h (Yellow-Chartreuse) 75.0 100.0 100.0
%%+h (Chartreuse) 90.0 100.0 100.0
%%+h (Chartreuse-Green) 105.0 100.0 100.0
%%+h (Green) 120.0 100.0 100.0
%%+h (Green-SpringGreen) 135.0 100.0 100.0
%%+h (Spring Green) 150.0 100.0 100.0
%%+h (SpringGreen-Cyan) 165.0 100.0 100.0
%%+h (Cyan) 180.0 100.0 100.0
%%+h (Sky Blue) 195.0 100.0 100.0
%%+h (Mid Blue) 210.0 100.0 100.0
%%+h (MidBlue-Blue) 225.0 100.0 100.0
%%+h (Blue) 240.0 100.0 100.0
%%+h (Blue-Indigo) 255.0 100.0 100.0
%%+h (Indigo) 270.0 100.0 100.0
%%+h (Violet) 285.0 100.0 100.0
%%+h (Magenta) 300.0 100.0 100.0
%%+h (Magenta-Crimson) 315.0 100.0 100.0
%%+h (Crimson) 330.0 100.0 100.0
%%+h (Crimson-Red) 345.0 100.0 100.0
%%+h (Black) 0.0 0.0 0.0
%%+t (90% Black) 90
%%+t (80% Black) 80
%%+t (70% Black) 70
%%+t (60% Black) 60
%%+t (50% Black) 50
%%+t (40% Black) 40
%%+t (30% Black) 30
%%+t (20% Black) 20
%%+t (10% Black) 10
%%+h (White) 0.0 0.0 100.0
%%EndComments
%%BeginProlog

%%BeginResource: procset XaraStudio1Dict
% Copyright (c) 1995,1996 Xara Ltd
/XaraStudio1Dict 300 dict def XaraStudio1Dict begin
/bd{bind def}bind def/ld{load def}bind def/xd{exch def}bind def/sv{save}bd
/rs{restore}bd/gs{gsave}bd/gr{grestore}bd/bg{begin}bd/en{end}bd/level2
/languagelevel where{pop languagelevel 2 ge}{false}ifelse def/setseps{
/v_gseps xd}bd/setplate{/v_plate xd}bd/setkgray{/v_keyg xd}bd/setmono{
/v_mono xd}bd/rgb2gray{0.109 mul exch 0.586 mul add exch 0.305 mul
add}bd/cmyk2rgb{3{dup 5 -1 roll add dup 1 gt{pop 1}if 1 exch sub exch}repeat
pop}bd/rgb2cmyk{3{1.0 exch sub 3 1 roll}repeat 3 copy 2 copy gt{exch}if
pop 2 copy gt{exch}if pop dup 0.5 gt{0.5 sub dup 3{5 1 roll dup 3 1
roll sub}repeat 5 1 roll pop}{pop 0}ifelse}bd/cmyk2hsb{3{dup 5 -1 roll
add 1 exch sub dup 0 lt{pop 0}if exch}repeat pop rgb2hsb}bd/rgb2hsb{setrgbcolor
currenthsbcolor}bd/readcurve{exch 255.0 mul 0.5 add cvi get 255.0 div}bd
/rgb2devcmyk{3 copy dup 3 1 roll eq 3 1 roll eq v_keyg 1 eq and and{pop
pop 1 exch sub 0 0 0 4 -1 roll}{/ucurve where{pop 3{1.0 exch sub 3
1 roll}repeat 3 copy 2 copy gt{exch}if pop 2 copy gt{exch}if pop dup
ucurve readcurve exch bcurve readcurve clamp01 3{5 1 roll dup 3 1 roll
sub clamp01}repeat 5 1 roll pop 4 1 roll ycurve readcurve 4 1 roll
mcurve readcurve 4 1 roll ccurve readcurve 4 1 roll}{rgb2cmyk}ifelse}ifelse}def
/rgb2keyG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop pop}{Max3}ifelse
1 exch sub bcurve readcurve clamp01}bd/rgb2key{Max3 1 exch sub bcurve
readcurve clamp01}bd/rgb2cyanG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop
pop pop 0}{rgb2cyan}ifelse}bd/rgb2cyan{3 copy Max3 1 exch sub ucurve
readcurve 4 1 roll pop pop 1 exch sub exch sub ccurve readcurve clamp01}bd
/rgb2magentaG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop pop pop 0}{rgb2magenta}ifelse}bd
/rgb2magenta{3 copy Max3 1 exch sub ucurve readcurve 4 1 roll pop
1 exch sub 3 1 roll pop sub mcurve readcurve clamp01}bd/rgb2yellowG{3
copy dup 3 1 roll eq 3 1 roll eq and{pop pop pop 0}{rgb2yellow}ifelse}bd
/rgb2yellow{3 copy Max3 1 exch sub ucurve readcurve 4 1 roll 1 exch
sub 4 1 roll pop pop sub ycurve readcurve clamp01}bd/rgb2plategray{v_keyg
0 eq v_plate v_cpky eq{{rgb2key}{rgb2keyG}ifelse}{v_plate v_cpyl eq{{rgb2yellow}{rgb2yellowG}ifelse}{v_plate
v_cpmg eq{{rgb2magenta}{rgb2magentaG}ifelse}{v_plate v_cpcy eq{{rgb2cyan}{rgb2cyanG}ifelse}{{rgb2key}{rgb2keyG}ifelse}ifelse}ifelse}ifelse}ifelse
1 exch sub setgray}bd/dc{0 def}bd/aca{/v_cpnone 0 def/v_cpcy 1 def
/v_cpyl 2 def/v_cpmg 3 def/v_cpky 4 def/v_gseps 0 def/v_keyg 0 def
/v_plate v_cpnone def/v_mono 0 def/v_wr dc/v_fc dc/v_fm dc/v_fy dc
/v_fk dc/v_fg dc/v_fr dc/v_fg dc/v_fb dc/v_sc dc/v_sm dc/v_sy dc/v_sk
dc/v_sg dc/v_sr dc/v_sg dc/v_sb dc/v_sct 0 def/v_fct 0 def/v_ft 0 def
/v_cxe 0 def/v_cxm 0 def/v_sa -1 def/v_ea -1 def/sR dc/sG dc/sB dc
/mR dc/mG dc/mB dc/eR dc/eG dc/eB dc/sC dc/sM dc/sY dc/sK dc/eC dc
/eM dc/eY dc/eK dc/sH dc/sS dc/sV dc/eH dc/eS dc/eV dc/sGy dc/eGy
dc/mGy dc/ci_datasrc dc/ci_matrix dc/ci_dataleft dc/ci_buf dc/ci_dataofs
dc/ci_y dc/rciBuf dc/cbslw dc/cmiBuf dc/cPalette dc/cpci_datasrc dc
/cpci_matrix dc/cpci_bpp dc/cpci_y dc/cpci_sampsleft dc/cpci_nextcol
dc/cpci_buf dc/startX dc/startY dc/endX dc/endY dc/endX2 dc/endY2 dc
/fillX dc/urx dc/ury dc/llx dc/lly dc/incD dc/distance dc/slice dc
/startangle dc/Steps dc/incH dc/incS dc/incV dc/incR dc/incG dc/incB
dc/incGy dc 0.25 setlinewidth [] 0 setdash 0 setlinejoin 0 setlinecap}bd
aca/setplategray{v_plate v_cpky eq{1 exch sub setgray pop pop pop}{v_plate
v_cpyl eq{pop 1 exch sub setgray pop pop}{v_plate v_cpmg eq{pop pop
1 exch sub setgray pop}{v_plate v_cpcy eq{pop pop pop 1 exch sub setgray}{1
exch sub setgray pop pop pop}ifelse}ifelse}ifelse}ifelse}bd/setplatecolor{v_plate
v_cpky eq{1 exch sub 0 0 0 4 -1 roll setcmykcolor pop pop pop}{v_plate
v_cpyl eq{pop 1 exch sub 0 0 0 4 2 roll setcmykcolor pop pop}{v_plate
v_cpmg eq{pop pop 1 exch sub 0 0 0 4 1 roll setcmykcolor pop}{v_plate
v_cpcy eq{pop pop pop 1 exch sub 0 0 0 setcmykcolor}{1 exch sub 0 0
0 4 -1 roll setcmykcolor pop pop pop}ifelse}ifelse}ifelse}ifelse}bd
/setcmykcolor where{pop}{/setcmykcolor{cmyk2rgb setrgbcolor}bd}ifelse
/setlogcmykcolor{v_gseps 1 eq{v_mono 1 eq{1 exch sub setgray pop pop
pop}{setcmykcolor}ifelse}{v_mono 1 eq{cmyk2rgb rgb2gray setgray}{setcmykcolor}ifelse}ifelse}bd
/setlogrgbcolor{v_gseps 1 eq{v_mono 1 eq{rgbtoplategray}{rgb2devcmyk
setplatecolor}ifelse}{v_mono 1 eq{rgb2gray setgray}{systemdict begin
setrgbcolor end}ifelse}ifelse}bd/setfillcolor{v_fct 0 eq{v_fc v_fm
v_fy v_fk setlogcmykcolor}{v_fr v_fg v_fb setlogrgbcolor}ifelse}bd
/setstrokecolor{v_sct 0 eq{v_sc v_sm v_sy v_sk setlogcmykcolor}{v_sr
v_sg v_sb setlogrgbcolor}ifelse}bd/setgfillcmyk{v_gseps 1 eq{v_mono
1 eq{cmyk2rgb rgb2plategray}{cmyk2rgb rgb2devcmyk setplatecolor}ifelse}{v_mono
1 eq{cmyk2rgb rgb2gray setgray}{setcmykcolor}ifelse}ifelse}bd/setgfillrgb{v_gseps
1 eq{v_mono 1 eq{rgb2plategray}{rgb2devcmyk setplatecolor}ifelse}{v_mono
1 eq{rgb2gray setgray}{systemdict begin setrgbcolor end}ifelse}ifelse}bd
/setgfillhsb{v_gseps 1 eq{v_mono 1 eq{systemdict begin sethsbcolor
currentrgbcolor end rgb2plategray}{systemdict begin sethsbcolor currentrgbcolor
end rgb2devcmyk setplatecolor}ifelse}{v_mono 1 eq{systemdict begin
sethsbcolor currentgray end setgray}{systemdict begin sethsbcolor end}ifelse}ifelse}bd
/Max{2 copy lt{exch}if pop}bd/Max3{2 copy lt{exch}if pop 2 copy lt{exch}if
pop}bd/Min{2 copy gt{exch}if pop}bd/Min3{2 copy gt{exch}if pop 2 copy
gt{exch}if pop}bd/clamp{3 1 roll Max 2 1 roll Min}bd/clamp01{0 Max
1 Min}bd/Pythag{dup mul exch dup mul add sqrt}bd/ssc{DeviceRGB setcolorspace
setcolor}bd/ssg{setgray}bd/p_render{}def/p_count 0 def/vis_flag true
def/DataString 3 string def/DataSrc{currentfile DataString readhexstring
pop}bd/DataStr1 1 string def/DataStr2 1 string def/DataStr3 1 string
def/DataSrc1{DataStr1}bd/DataSrc2{DataStr2}bd/DataSrc3{DataStr3}bd
/colorimage where{pop/ci{colorimage}bd}{/ci{pop pop/ci_datasrc exch
def matrix invertmatrix/ci_matrix exch def pop/ci_dataleft 0 def/ci_buf()def
/ci_dataofs 0 def 0 1 3 -1 roll 1 sub{/ci_y exch def dup 0 1 3 -1
roll 1 sub{0 1 2{pop ci_dataleft 0 eq{ci_datasrc dup length/ci_dataleft
exch def/ci_buf exch def/ci_dataofs 0 def}if ci_buf ci_dataofs get
255 div/ci_dataofs ci_dataofs 1 add def/ci_dataleft ci_dataleft 1 sub
def}for setrgbcolor dup ci_y 3 -1 roll 1 add ci_y 1 add 4 copy 5 1
roll 4 2 roll 5 -1 roll 1 1 4{pop ci_matrix transform 8 2 roll}for
m l l l closepath fill}for}for pop}bd}ifelse/rci{/rciBuf 4 index 3
index mul 7 add 8 div floor cvi string def{currentfile rciBuf readhexstring
pop}bind false 3 ci}bd/cbsl{2 eq/cbslL2 xd 5 index/cbslw xd translate
scale 8 [ 3 index 0 0 5 index 0 0 ] cbslL2{/DataStr1 cbslw string def
currentfile/ASCII85Decode filter/RunLengthDecode filter DataStr1 readstring
pop pop/DataStr2 cbslw string def currentfile/ASCII85Decode filter
/RunLengthDecode filter DataStr2 readstring pop pop/DataStr3 cbslw
string def currentfile/ASCII85Decode filter/RunLengthDecode filter
DataStr3 readstring pop pop{DataStr1}bind{DataStr2}bind{DataStr3}bind
true}{/DataSrc load false}ifelse 3 ci}bd/gbsl{2 eq/gbslL2 xd 5 index
/gbslw xd translate scale 8 [ 3 index 0 0 5 index 0 0 ] gbslL2{/DataStr1
gbslw string def currentfile/ASCII85Decode filter/RunLengthDecode filter
DataStr1 readstring pop pop{DataStr1}bind}{/DataStr1 gbslw string def
currentfile DataSrc1 readhexstring pop pop{DataStr1}bind}ifelse image}bd
/cmi{/cmiBuf 4 index 3 index mul 7 add 8 div floor cvi string def{currentfile
cmiBuf readhexstring pop}bind image}bd/cpal{4 mul string/cPalette exch
def currentfile cPalette readhexstring pop}bd/cpci{/cpci_datasrc exch
def matrix invertmatrix/cpci_matrix exch def/cpci_bpp exch def cpci_init
0 1 3 -1 roll 1 sub{/cpci_y exch def dup cpci_bpp 4 eq{cpci_sampsleft
1 eq{/cpci_sampsleft 0 def}if}if 0 1 3 -1 roll 1 sub{cpci_nextcol dup
cpci_y 3 -1 roll 1 add cpci_y 1 add 4 copy 5 1 roll 4 2 roll 5 -1 roll
1 1 4{pop cpci_matrix transform 8 2 roll}for m l l l closepath fill}for}for
pop}bd/cpci_init{/cpci_sampsleft 0 def}bd/cpci_buf 1 string def/cpci_nextcol{cpci_bpp
1 eq{cpci_sampsleft 0 eq{currentfile cpci_buf readhexstring pop pop
/cpci_sampsleft 8 def}if cpci_buf dup 0 get dup 1 and setgray -1 bitshift
1 exch put/cpci_sampsleft cpci_sampsleft 1 sub def}{cpci_bpp 4 eq{cpci_sampsleft
0 eq{currentfile cpci_buf readhexstring pop pop/cpci_sampsleft 2 def}if
cpci_buf 0 get dup 15 and exch -4 bitshift cpci_buf 0 3 -1 roll put
/cpci_sampsleft cpci_sampsleft 1 sub def}{currentfile cpci_buf readhexstring
pop 0 get}ifelse 4 mul dup 2 add cPalette exch get 255 div exch dup
1 add cPalette exch get 255 div exch cPalette exch get 255 div setrgbcolor}ifelse}bd
/setup1asciiproc{[ currentfile mystring/readhexstring cvx/pop cvx
] cvx bind}bd/setup1binaryproc{[ currentfile mystring/readstring cvx
/pop cvx ] cvx bind}bd level2{save/dontloadlevel1 xd}if/iw 0 def/ih
0 def/im_save 0 def/setupimageproc 0 def/polarity 0 def/smoothflag
0 def/mystring 0 def/bpc 0 def/beginimage{/im_save save def dup 0 eq{pop
/setup1binaryproc}{1 eq{/setup1asciiproc}{(error, can't use level2 data acquisition procs for level1)print
flush}ifelse}ifelse/setupimageproc exch ld/polarity xd/smoothflag xd
/imat xd/mystring exch string def/bpc xd/ih xd/iw xd}bd/endimage{im_save
restore}bd/1bitbwcopyimage{1 setgray 0 0 moveto 0 1 rlineto 1 0 rlineto
0 -1 rlineto closepath fill 0 setgray iw ih polarity imat setupimageproc
imagemask}bd/1bitcopyimage{setrgbcolor 0 0 moveto 0 1 rlineto 1 0 rlineto
0 -1 rlineto closepath fill setrgbcolor iw ih polarity imat setupimageproc
imagemask}bd/1bitmaskimage{setrgbcolor iw ih polarity [iw 0 0 ih 0
0] setupimageproc imagemask}bd level2{dontloadlevel1 restore}if level2
not{save/dontloadlevel2 xd}if/setup2asciiproc{currentfile/ASCII85Decode
filter/RunLengthDecode filter}bd/setup2binaryproc{currentfile/RunLengthDecode
filter}bd/myimagedict 9 dict dup begin/ImageType 1 def/MultipleDataSource
false def end def/im_save 0 def/setupimageproc 0 def/polarity 0 def
/smoothflag 0 def/mystring 0 def/bpc 0 def/ih 0 def/iw 0 def/beginimage{
/im_save save def dup 2 eq{pop/setup2binaryproc}{dup 3 eq{pop/setup2asciiproc}{0
eq{/setup1binaryproc}{/setup1asciiproc}ifelse}ifelse}ifelse/setupimageproc
exch ld{[ 1 0 ]}{[ 0 1 ]}ifelse/polarity xd/smoothflag xd/imat xd/mystring
exch string def/bpc xd/ih xd/iw xd}bd/endimage{im_save restore}bd/1bitbwcopyimage{1
ssg 0 0 moveto 0 1 rlineto 1 0 rlineto 0 -1 rlineto closepath fill
0 ssg myimagedict dup begin/Width iw def/Height ih def/Decode polarity
def/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd/1bitcopyimage{ssc
0 0 moveto 0 1 rlineto 1 0 rlineto 0 -1 rlineto closepath fill ssc
myimagedict dup begin/Width iw def/Height ih def/Decode polarity def
/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd/1bitmaskimage{ssc
myimagedict dup begin/Width iw def/Height ih def/Decode polarity def
/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd level2 not{dontloadlevel2
restore}if
level2{save/dontloadlevel1 xd}if/startnoload{{/noload save def}if}bd
/endnoload{{noload restore}if}bd/testsystemdict{where{systemdict eq{true}{false}ifelse}{false}ifelse}bd
/ncolors 1 def/colorimage where{pop true}{false}ifelse{/ncolors 0
statusdict begin/processcolors where{pop pop processcolors}{/deviceinfo
where{pop deviceinfo/Colors known{pop{deviceinfo/Colors get}}if}if}ifelse
end def ncolors 0 ne{/colorimage testsystemdict/setcolortransfer testsystemdict
/currentcolortransfer testsystemdict/currentcmykcolor testsystemdict
and and and not{/ncolors 0 def}if}if}if ncolors dup 1 ne exch dup 3
ne exch 4 ne and and{/ncolors 0 def}if ncolors 1 eq dup dup not startnoload{
/expandbw{expandfactor mul round cvi bwclut exch get 255 div}bd/doclutimage{bwclut
colorclut pop/bwclut xd bpc dup 8 eq{pop 255}{4 eq{15}{3}ifelse}ifelse
/expandfactor xd [/expandbw load/exec load dup currenttransfer exch
] cvx bind settransfer iw ih bpc imat setupimageproc image}bd}if not
endnoload ncolors dup 3 eq exch 4 eq or dup dup not startnoload{/nullproc{{}}def
/concatutil{/exec load 7 -1 roll/exec load}bd/defsubclut{1 add getinterval
def}bd/spconcattransfer{/Dclut exch def/Cclut exch def/Bclut exch def
/Aclut exch def/ncompute exch ld currentcolortransfer [{Aclut ncompute}concatutil
] cvx [{Bclut ncompute}concatutil ] cvx [{Cclut ncompute}concatutil
] cvx [{Dclut ncompute}concatutil ] cvx setcolortransfer}bd/setuprgbcluts{
/bit3x rgbclut length 3 sub def/bit1x bit3x 3 idiv def/rclut rgbclut
def/gclut rclut 1 bit3x defsubclut/bclut rclut 2 bit3x defsubclut}bd}if
not endnoload ncolors 3 eq dup dup not startnoload{/3compute{exch bit3x
mul round cvi get 255 div}bd/doclutimage{/rgbclut xd pop setuprgbcluts
/3compute rclut gclut bclut dup spconcattransfer iw ih bpc imat [
setupimageproc/exec load/dup load dup ] cvx nullproc nullproc true
3 colorimage}bd}if not endnoload ncolors 4 eq dup dup not startnoload{
/stuffclut{cmykindex 3 -1 roll put}bd/ftoint{1 exch sub 255 mul round
cvi}bd/4compute{exch bit4x mul round cvi get 255 div}bd/computecmykclut{setuprgbcluts
/bit4x rgbclut length 3 idiv 4 mul 4 sub def/cmykclut bit4x 4 add
string def/cclut cmykclut def/mclut cclut 1 bit4x defsubclut/yclut
cclut 2 bit4x defsubclut/kclut cclut 3 bit4x defsubclut/cmykindex 0
def 0 1 bit1x{dup/cmykindex exch bit1x exch sub 4 mul def 3 mul dup
rclut exch get 255 div exch dup gclut exch get 255 div exch bclut exch
get 255 div setrgbcolor currentcmykcolor ftoint kclut stuffclut ftoint
yclut stuffclut ftoint mclut stuffclut ftoint cclut stuffclut}for}bd
/doclutimage{/rgbclut xd pop invalidcolortable?{computecmykclut}if
/4compute cclut mclut yclut kclut spconcattransfer iw ih bpc imat
[ setupimageproc/exec load/dup load dup dup ] cvx nullproc nullproc
nullproc true 4 colorimage}bd}if not endnoload ncolors 0 eq dup dup
not startnoload{/lookupandstore{3 mul 3 getinterval putinterval exch
3 add exch 3 copy}bd/8lookup/lookupandstore ld/4lookup{/byte 1 index
def -4 bitshift lookupandstore byte 15 and lookupandstore}bd/2lookup{
/byte 1 index def -6 bitshift lookupandstore byte -4 bitshift 3 and
lookupandstore byte -2 bitshift 3 and lookupandstore byte 3 and lookupandstore}bd
/colorexpand{mystringexp 0 rgbclut 3 copy 7 -1 roll/mylookup load
forall pop pop pop pop pop}bd/createexpandstr{/mystringexp exch mystring
length mul string def}bd/doclutimage{/rgbclut xd pop/mylookup bpc 8
eq{3 createexpandstr/8lookup}{bpc 4 eq{6 createexpandstr/4lookup}{12
createexpandstr/2lookup}ifelse}ifelse ld iw ih bpc imat [ setupimageproc
/exec load/colorexpand load/exec load] cvx false 3 colorimage}bd}if
not endnoload/colorimage where{pop true}{false}ifelse dup{/do24image{iw
ih 8 imat setupimageproc false 3 colorimage}bd}if dup dup startnoload
not{/rgbtogray{/str xd/len str length def/smlen len 3 idiv def/rstr
str def/gstr str 1 len 1 sub getinterval def/bstr str 2 len 2 sub getinterval
def str dup 0 1 smlen 1 sub{dup 3 mul rstr 1 index get .3 mul gstr
2 index get .59 mul add bstr 3 -1 roll get .11 mul add round cvi put
dup}for pop 0 smlen getinterval}bd/do24image{iw ih 8 imat [ setupimageproc
/exec load/rgbtogray load/exec load ] cvx bind image}bd}if endnoload
/doimage{iw ih 8 imat setupimageproc image}bd level2{dontloadlevel1
restore}if level2 not{save/dontloadlevel2 xd}if/myappcolorspace/DeviceRGB
def/rgbclut 0 def/doclutimage{/rgbclut xd pop bpc dup 8 eq{pop 255}{4
eq{15}{3}ifelse}ifelse/hival xd [/Indexed myappcolorspace hival rgbclut]
setcolorspace myimagedict dup begin/Width iw def/Height ih def/Decode
[0 hival] def/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
bpc def/Interpolate smoothflag def end image}bd/do24image{myappcolorspace
setcolorspace myimagedict dup begin/Width iw def/Height ih def/Decode
[0 1 0 1 0 1] def/ImageMatrix imat def/DataSource setupimageproc def
/BitsPerComponent 8 def/Interpolate smoothflag def end image}bd level2
not{dontloadlevel2 restore}if
/NumSteps{dtransform matrix defaultmatrix idtransform Pythag currentscreen
pop pop 72 exch div div}bd/FindMinSteps{v_ft 4 eq{urx startX sub abs
llx startX sub abs Max ury startY sub abs lly startY sub abs Max Pythag
2 3.14159265 mul mul 0}{v_ft 2 eq{endY startY sub endX startX sub Pythag
endY2 startY sub endX2 startX sub Pythag gt{endY startY sub endX startX
sub}{endY2 startY sub endX2 startX sub}ifelse}{endY startY sub endX
startX sub}ifelse}ifelse NumSteps}bd/cxe{/v_cxe exch def}bd/cxm{pop
/v_cxm exch def}bd/cxmt{pop pop}bd/cxt{pop}bd/S_eoclip{currentflat{{eoclip}stopped{dup
currentflat exch sub 20 gt{([Error: PathTooComplex; OffendingCommand: eoclip]\n)print
flush exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/S_clip{currentflat{{clip}stopped{dup currentflat exch sub 20 gt{([Error: PathTooComplex; OffendingCommand: clip]\n)print
flush exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/S_eofill{currentflat{{eofill}stopped{dup currentflat exch sub 20
gt{([Error: PathTooComplex; OffendingCommand: eofill]\n)print flush
exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/gpbbx{pathbbox/ury exch def/urx exch def/lly exch def/llx exch def}bd
/lineargfill{initgfill{false initgfx/distance endX startX sub endY
startY sub Pythag def/incD distance Steps div def endY startY sub endX
startX sub atan newpath llx lly urx ury Bx startX startY translate
rotate gpbbx eGy ssg newpath llx lly urx ury Bx S_eofill sGy ssg newpath
llx lly 0 ury Bx S_eofill/fillX 0 def 0 1 Steps 1 sub{stepgfx newpath
fillX lly fillX incD add dup/fillX exch def ury Bx S_eofill pop}for}if}bd
/radialgfill{initgfill{false initgfx/distance endX startX sub endY
startY sub Pythag def/incD distance Steps div def eGy ssg newpath llx
lly urx ury Bx S_eofill/distance 0 def 0 1 Steps 1 sub{stepgfx newpath
startX startY distance 0 360 arc closepath distance incD add dup/distance
exch def 0 rmoveto startX startY distance 0 360 arc closepath S_eofill
pop}for}if}bd/ellipticgfill{initgfill{true initgfx sGy ssg newpath
llx lly urx ury Bx S_eofill [ endX startX sub endY startY sub endX2
startX sub endY2 startY sub startX startY ] concat Steps 1 sub -1 0{stepgfx
/i exch def 0 0 moveto 0 0 i Steps div 0 360 arc fill}for}if}bd/conicalgfill{initgfill{urx
startX sub abs llx startX sub abs Max ury startY sub abs lly startY
sub abs Max Pythag startY endY sub startX endX sub Pythag div/radius
exch def true initgfx [ endX startX sub endY startY sub startY endY
sub endX startX sub startX startY ] concat/slice 180 Steps div def
/startangle 0 def Steps -1 0{pop stepgfx 0 0 moveto 0 0 radius startangle
neg dup slice add arc fill 0 0 moveto 0 0 radius startangle dup slice
add dup/startangle exch def arc fill}for}if}bd/initgfill{gpbbx{S_eoclip}{S_clip}ifelse
startX endX eq startY endY eq and sGy eGy eq or dup{sGy ssg newpath
llx lly urx ury Bx S_eofill}if not}bd/initgfx{/flag exch def flag{sGy
eGy/sGy exch def/eGy exch def}if eGy sGy sub abs 256 mul FindMinSteps
Min 256 Min ceiling 1 Max/Steps exch def eGy sGy sub Steps div/incGy
exch def sGy/mGy exch def}bd/stepgfx{mGy ssg mGy incGy add/mGy exch
def}bd/linearfill{initfill{false initfx endX startX sub endY startY
sub Pythag/distance exch def/incD distance Steps div def endY startY
sub endX startX sub atan newpath llx lly urx ury Bx startX startY translate
rotate gpbbx v_cxe 0 eq{eR eG eB setgfillrgb}{eH eS eV setgfillhsb}ifelse
newpath llx lly urx ury Bx S_eofill v_cxe 0 eq{sR sG sB setgfillrgb}{sH
sS sV setgfillhsb}ifelse newpath llx lly 0 ury Bx S_eofill/fillX 0
def 0 1 Steps 1 sub{stepfx newpath fillX lly fillX incD add dup/fillX
exch def ury Bx S_eofill pop}for}if}bd/radialfill{initfill{false initfx
endX startX sub endY startY sub Pythag/distance exch def/incD distance
Steps div def v_cxe 0 eq{eR eG eB setgfillrgb}{eH eS eV setgfillhsb}ifelse
newpath llx lly urx ury Bx S_eofill/distance 0 def 0 1 Steps 1 sub{stepfx
newpath startX startY distance 0 360 arc closepath distance incD add
dup/distance exch def 0 rmoveto startX startY distance 0 360 arc closepath
S_eofill pop}for}if}bind def/ellipticalfill{initfill{true initfx v_cxe
0 eq{sR sG sB setgfillrgb}{sH sS sV setgfillhsb}ifelse newpath llx
lly urx ury Bx S_eofill [ endX startX sub endY startY sub endX2 startX
sub endY2 startY sub startX startY ] concat Steps 1 sub -1 0{stepfx
/i exch def 0 0 moveto 0 0 i Steps div 0 360 arc fill}for v_cxe 0
eq{sR sG sB eR eG eB/sB exch def/sG exch def/sR exch def/eB exch def
/eG exch def/eR exch def}if}if}bd/conicalfill{initfill{urx startX
sub abs llx startX sub abs Max ury startY sub abs lly startY sub abs
Max Pythag startY endY sub startX endX sub Pythag div/radius exch def
true initfx [ endX startX sub endY startY sub startY endY sub endX
startX sub startX startY ] concat/slice 180 Steps div def/startangle
0 def Steps -1 0{pop stepfx 0 0 moveto 0 0 radius startangle neg dup
slice add arc fill 0 0 moveto 0 0 radius startangle dup slice add dup
/startangle exch def arc fill}for}if}bd/initfill{gpbbx{S_eoclip}{S_clip}ifelse
startX endX eq startY endY eq and v_cxe 2 ne sR eR eq sG eG eq and
sB eB eq and and or dup{sR sG sB setgfillrgb newpath llx lly urx ury
Bx S_eofill}if not}bd/initfx{/flag exch def v_cxe 0 eq{flag{sR sG sB
eR eG eB/sB exch def/sG exch def/sR exch def/eB exch def/eG exch def
/eR exch def}if eR sR sub abs 256 mul eG sG sub abs 256 mul Max eB
sB sub abs 256 mul Max FindMinSteps Min 256 Min ceiling 1 Max/Steps
exch def/incR eR sR sub Steps div def/incG eG sG sub Steps div def
/incB eB sB sub Steps div def sR/mR exch def sG/mG exch def sB/mB
exch def}{sR sG sB rgb2hsb/sV exch def/sS exch def/sH exch def eR eG
eB rgb2hsb/eV exch def/eS exch def/eH exch def eH sH sub abs v_cxe
1 eq{dup 0.5 gt{1 exch sub}if}{dup 0.5 lt{1 exch sub}if}ifelse 256
mul eS sS sub abs 256 mul Max eV sV sub abs 256 mul Max FindMinSteps
Min 256 Min ceiling 1 Max/Steps exch def v_cxe 1 eq{/incH eH sH sub
dup abs 0.5 gt{dup 0 ge{1 sub}{1 add}ifelse}if Steps div def/incS eS
sS sub Steps div def/incV eV sV sub Steps div def}{/incH eH sH sub
dup abs 0.5 le{dup 0 ge{1 sub}{1 add}ifelse}if Steps div def/incS eS
sS sub Steps div def/incV eV sV sub Steps div def}ifelse flag{/sH eH
/eH sH def def/sS eS/eS sS def def/sV eV/eV sV def def/incH incH neg
def/incS incS neg def/incV incV neg def}if}ifelse}bd/stepfx{v_cxe 0
eq{mR mG mB setgfillrgb mR incR add/mR exch def mG incG add/mG exch
def mB incB add/mB exch def}{sH sS sV setgfillhsb sH incH add dup 0
le{1 add}{dup 1 ge{1 sub}if}ifelse/sH exch def sS incS add/sS exch
def sV incV add/sV exch def}ifelse}bd
/ar{}bd/arr{pop pop pop pop pop pop pop}bd/ae{pop pop pop pop pop
pop}bd/aoa{pop}bd/apl{pop}bd/apc{}bd/aof{pop pop}bd/aafs{pop pop pop}bd
/O{pop}bd/R{pop}bd/axop{pop pop pop pop}bd/g{/v_ft 0 def/v_fc 0 def
/v_fm 0 def/v_fy 0 def 1 exch sub/v_fk exch def/v_fct 0 def}bd/G{
/v_sc 0 def/v_sm 0 def/v_sy 0 def 1 exch sub/v_sk exch def/v_sct 0
def}bd/k{/v_fk exch def/v_fy exch def/v_fm exch def/v_fc exch def/v_ft
0 def/v_fct 0 def}bd/K{/v_sk exch def/v_sy exch def/v_sm exch def/v_sc
exch def/v_sct 0 def}bd/Xa{/v_fb exch def/v_fg exch def/v_fr exch def
/v_ft 0 def/v_fct 1 def}bd/XA{/v_sb exch def/v_sg exch def/v_sr exch
def/v_sct 1 def}bd/a_tc{exch pop 1 exch sub dup 3 -1 roll exch div
exch dup 4 -1 roll exch div 3 1 roll dup 5 -1 roll exch div 4 1 roll
5 -1 roll exch div 4 1 roll}bd/x{a_tc k}bd/X{a_tc K}bd/Xx{0 eq{x}{pop
pop Xa}ifelse}bd/XX{0 eq{X}{pop pop XA}ifelse}bd/awr{/v_wr exch def}bd
/w{setlinewidth}bd/j{setlinejoin}bd/J{setlinecap}bd/d{setdash}bd/asc{pop
pop J}bd/aec{pop pop J}bd/csah{pop pop pop}bd/ceah{pop pop pop}bd/cst{pop
pop}bd/cdp{pop}bd/m{moveto}bd/l{lineto}bd/c{curveto}bd/Bx{4 copy 5
1 roll 4 2 roll 5 -1 roll m l l l closepath}bd/Cp{Bx clip newpath}bd
/a_fp{gsave v_wr 0 ne v_ft 0 eq{setfillcolor{eofill}{fill}ifelse}{v_ft
1 eq{linearfill}{v_ft 2 eq{ellipticalfill}{v_ft 3 eq{radialfill}{v_ft
4 eq{conicalfill}{v_ft 8 eq{lineargfill}{v_ft 9 eq{ellipticgfill}{v_ft
10 eq{radialgfill}{conicalgfill}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse
grestore}bd/*u{/p_count p_count 1 add def}bd/*U{/p_count p_count 1
sub def p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd/B{/p_render{a_fp
setstrokecolor stroke}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/b{closepath B}bd/F{/p_render{a_fp newpath}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/f{closepath F}bd/S{/p_render{setstrokecolor stroke}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/s{closepath S}bd/H{/p_render{newpath}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/h{closepath H}bd/N{H}bd/n{h}bd/cag{dup 7 add/v_ft exch def dup 2
eq{pop/endY2 exch def/endX2 exch def}{7 eq{pop pop/v_ft 8 def}if}ifelse
/endY exch def/endX exch def/startY exch def/startX exch def/eGy exch
def/sGy exch def}bd/caz{dup/v_ft exch def dup 2 eq{pop/endY2 exch def
/endX2 exch def}{7 eq{pop pop/v_ft 1 def}if}ifelse/endY exch def/endX
exch def/startY exch def/startX exch def/eB exch def/eG exch def/eR
exch def/sB exch def/sG exch def/sR exch def}bd/cax{dup/v_ft exch def
dup 2 eq{pop/endY2 exch def/endX2 exch def}{7 eq{pop pop/v_ft 1 def}if}ifelse
/endY exch def/endX exch def/startY exch def/startX exch def pop pop
8 3 roll pop pop/sB exch def/sG exch def/sR exch def/eB exch def/eG
exch def/eR exch def}bd/axm{/endY exch def/endX exch def/startY exch
def/startX exch def}bd/alyr{pop pop 1 eq{true}{false}ifelse/vis_flag
exch def pop pop}bd
/t{moveto show}bd/ts{moveto false charpath S}bd/tf{moveto true charpath
F}bd/tb{3 copy moveto true charpath F moveto false charpath S}bd/selectfont
where{pop}{/selectfont{dup type/integertype eq{exch findfont exch scalefont
setfont}{exch findfont exch makefont setfont}ifelse}bd}ifelse/sf{selectfont}bd
/u{}bd/U{}bd/anu{pop}bd
end
%%EndResource
%%EndProlog
%%BeginSetup
save XaraStudio1Dict begin
%%EndSetup
0 cxe
2 0 cxm
1 awr
0.00 0.00 0.00 (Black) 0 1 XX
1.048 w
0 j
[ ] 0 d
0 J
131.434 419.757 m
131.434 394.220 l
504.661 394.220 l
504.661 419.757 l
131.434 419.757 l
s
0.226 w
131.045 388.374 m
131.045 349.006 l
504.272 349.006 l
504.272 388.374 l
131.045 388.374 l
s
1.046 w
92.921 300.056 m
92.921 291.653 l
467.063 291.653 l
467.063 300.056 l
92.921 300.056 l
s
1.047 w
93.037 289.621 m
93.037 264.129 l
183.700 264.129 l
183.700 289.621 l
93.037 289.621 l
s
375.976 289.625 m
375.976 264.123 l
466.201 264.123 l
466.201 289.625 l
375.976 289.625 l
s
234.990 289.625 m
234.990 264.123 l
325.215 264.123 l
325.215 289.625 l
234.990 289.625 l
s
1.048 w
93.085 261.767 m
93.085 236.230 l
466.312 236.230 l
466.312 261.767 l
93.085 261.767 l
s
1.046 w
375.862 173.388 m
375.862 155.198 l
449.813 155.198 l
449.813 173.388 l
375.862 173.388 l
s
1.043 w
338.885 155.073 m
338.885 136.917 l
449.816 136.917 l
449.816 155.073 l
338.885 155.073 l
s
1.044 w
301.908 137.077 m
301.908 118.921 l
449.815 118.921 l
449.815 137.077 l
301.908 137.077 l
s
1.046 w
200.269 235.595 m
200.269 217.405 l
274.220 217.405 l
274.220 235.595 l
200.269 235.595 l
s
1.186 w
97.598 118.900 m
97.598 67.590 l
247.392 67.590 l
247.392 118.900 l
97.598 118.900 l
s
1.048 w
97.662 66.519 m
97.662 40.982 l
495.030 40.982 l
495.030 66.519 l
97.662 66.519 l
s
1.186 w
344.840 118.904 m
344.840 67.594 l
494.634 67.594 l
494.634 118.904 l
344.840 118.904 l
s
1.044 w
1.00 1.00 1.00 (White) 0 1 Xx
220.790 119.328 m
220.790 101.172 l
368.697 101.172 l
368.697 119.328 l
220.790 119.328 l
b
183.096 85.578 m
183.096 67.422 l
407.470 67.422 l
407.470 85.578 l
183.096 85.578 l
b
1.046 w
145.980 205.345 m
145.980 187.155 l
179.355 187.155 l
179.355 205.345 l
145.980 205.345 l
s
1.047 w
125.520 144.246 m
125.520 118.754 l
199.471 118.754 l
199.471 144.246 l
125.520 144.246 l
s
1.046 w
327.825 231.595 m
327.825 213.405 l
386.926 213.405 l
386.926 231.595 l
327.825 231.595 l
s
0.60 0.60 0.60 (40% Black) 0 1 XX
4 w
2 j
0.60 0.60 0.60 (40% Black) 0 1 Xx
102.713 235.780 m
102.713 200.827 102.713 165.870 102.713 130.917 c
S
108.712 131.916 m
96.713 131.916 l
102.713 117.918 l
f
129.712 235.780 m
129.712 209.651 129.712 183.520 129.712 157.392 c
S
135.711 158.391 m
123.712 158.391 l
129.712 144.393 l
f
0.00 0.00 0.00 (Black) 0 1 XX
1 w
0.00 0.00 0.00 (Black) 0 1 Xx
288.711 235.781 m
288.711 199.531 288.711 163.278 288.711 127.028 c
S
292.710 127.694 m
284.711 127.694 l
288.711 118.362 l
f
314.712 137.781 m
314.712 167.544 314.712 197.308 314.712 227.072 c
S
314.712 226.405 m
318.044 226.405 l
318.541 226.405 318.902 227.279 318.711 227.738 c
315.378 235.737 l
315.257 236.027 315.026 236.404 314.712 236.404 c
314.397 236.404 314.166 236.027 314.045 235.737 c
310.712 227.738 l
310.521 227.279 310.882 226.405 311.379 226.405 c
f
0.60 0.60 0.60 (40% Black) 0 1 XX
4 w
0.60 0.60 0.60 (40% Black) 0 1 Xx
484.710 120.149 m
484.710 192.127 484.710 264.107 484.710 336.085 c
S
478.710 335.085 m
490.709 335.085 l
484.710 349.083 l
f
0.00 0.00 0.00 (Black) 0 1 XX
1 w
0.00 0.00 0.00 (Black) 0 1 Xx
252.712 217.660 m
252.712 187.527 252.712 157.394 252.712 127.261 c
S
256.711 127.927 m
248.712 127.927 l
252.712 118.595 l
f
217.712 217.660 m
217.712 187.838 217.712 158.014 217.712 128.190 c
S
221.711 128.856 m
213.712 128.856 l
217.712 119.524 l
f
0.60 0.60 0.60 (40% Black) 0 1 XX
4 w
0.60 0.60 0.60 (40% Black) 0 1 Xx
461.710 119.781 m
461.710 154.216 461.710 188.653 461.710 223.088 c
S
455.710 222.088 m
467.709 222.088 l
461.710 236.086 l
f
272.712 321.576 m
272.712 324.393 272.712 327.210 272.712 330.027 c
272.712 332.047 272.712 334.068 272.712 336.088 c
S
266.712 335.088 m
278.711 335.088 l
272.712 349.086 l
f
272.710 330.449 m
272.710 312.504 l
S
278.709 313.503 m
266.710 313.503 l
272.710 299.505 l
f
0.250 w
0.00 0.00 0.00 (Black) 0 1 Xx
/Times-Roman 12 sf (P) 227.710 402.782 t (o) 235.714 402.782 t (r) 242.388 402.782 t (t) 246.384 402.782
t (a) 249.718 402.782 t (l) 256.392 402.782 t (s) 259.058 402.782 t (,) 265.058 402.782 t ( ) 268.392
402.782 t (U) 271.726 402.782 t (s) 280.392 402.782 t (e) 286.392 402.782 t (r) 293.066 402.782 t ( )
297.062 402.782 t (I) 300.396 402.782 t (n) 303.730 402.782 t (t) 310.404 402.782 t (e) 313.738 402.782
t (r) 320.412 402.782 t (f) 324.408 402.782 t (a) 327.742 402.782 t (c) 334.416 402.782 t (e) 340.416
402.782 t (s) 347.090 402.782 t (,) 353.090 402.782 t ( ) 356.424 402.782 t (T) 359.542 402.782 t (o)
365.543 402.782 t (o) 372.217 402.782 t (l) 378.891 402.782 t (s) 381.557 402.782 t 0.00 0.00 0.00 (Black)
0 1 XX
1.046 w
0 j
141.558 377.845 m
141.558 359.655 l
174.933 359.655 l
174.933 377.845 l
141.558 377.845 l
s
0.250 w
2 j
/Times-Roman 10 sf (A) 144.211 365.282 t (l) 150.881 365.282 t (a) 153.103 365.282 t (d) 158.664 365.282
t (i) 164.225 365.282 t (n) 166.447 365.282 t 1.046 w
0 j
217.930 377.845 m
217.930 359.655 l
251.305 359.655 l
251.305 377.845 l
217.930 377.845 l
s
0.250 w
2 j
(T) 219.983 365.782 t (o) 224.984 365.782 t (p) 230.545 365.782 t (c) 236.106 365.782 t (a) 241.106 365.782
t (t) 246.667 365.782 t 1.046 w
0 j
294.304 377.845 m
294.304 359.655 l
327.679 359.655 l
327.679 377.845 l
294.304 377.845 l
s
0.250 w
2 j
(S) 299.307 365.782 t (p) 305.977 365.782 t (l) 311.538 365.782 t (a) 313.760 365.782 t (t) 319.321 365.782
t 1.046 w
0 j
357.037 377.845 m
357.037 359.655 l
417.694 359.655 l
417.694 377.845 l
357.037 377.845 l
s
0.250 w
2 j
(V) 361.882 365.407 t (O) 368.552 365.407 t (D) 376.330 365.407 t (e) 383.552 365.407 t (s) 389.113 365.407
t (k) 394.113 365.407 t (t) 399.113 365.407 t (o) 401.891 365.407 t (p) 407.452 365.407 t 1.046 w
0 j
433.411 377.845 m
433.411 359.655 l
494.068 359.655 l
494.068 377.845 l
433.411 377.845 l
s
0.250 w
2 j
(A) 441.581 364.907 t (s) 448.251 364.907 t (t) 453.251 364.907 t (r) 456.029 364.907 t (o) 459.359 364.907
t (G) 464.920 364.907 t (r) 472.698 364.907 t (i) 476.028 364.907 t (d) 478.250 364.907 t (R) 101.710
273.282 t (e) 108.932 273.282 t (g) 114.493 273.282 t (i) 120.054 273.282 t (s) 122.276 273.282 t (t)
127.276 273.282 t (r) 130.054 273.282 t (y) 133.384 273.282 t ( ) 138.384 273.282 t (S) 141.162 273.282
t (e) 147.832 273.282 t (r) 153.393 273.282 t (v) 156.723 273.282 t (i) 161.723 273.282 t (c) 163.945
273.282 t (e) 168.945 273.282 t (D) 248.715 273.282 t (a) 255.937 273.282 t (t) 261.498 273.282 t (a)
264.276 273.282 t ( ) 269.837 273.282 t (S) 272.615 273.282 t (e) 279.285 273.282 t (r) 284.846 273.282
t (v) 288.176 273.282 t (i) 293.176 273.282 t (c) 295.398 273.282 t (e) 300.398 273.282 t (s) 305.959
273.282 t (C) 384.959 273.282 t (o) 392.181 273.282 t (m) 397.742 273.282 t (p) 406.072 273.282 t (u)
411.633 273.282 t (t) 417.194 273.282 t (e) 419.972 273.282 t ( ) 425.533 273.282 t (S) 428.311 273.282
t (e) 434.981 273.282 t (r) 440.542 273.282 t (v) 443.872 273.282 t (i) 448.872 273.282 t (c) 451.094
273.282 t (e) 456.094 273.282 t (H) 100.711 245.782 t (T) 107.933 245.782 t (T) 114.041 245.782 t (P)
120.149 245.782 t ( ) 126.639 245.782 t (S) 129.417 245.782 t (e) 136.087 245.782 t (r) 141.648 245.782
t (v) 144.978 245.782 t (i) 149.978 245.782 t (c) 152.200 245.782 t (e) 157.200 245.782 t (s) 162.761
245.782 t (S) 243.490 245.782 t (O) 250.160 245.782 t (A) 257.938 245.782 t (P) 264.608 245.782 t ( )
271.098 245.782 t (S) 273.876 245.782 t (e) 280.546 245.782 t (r) 286.107 245.782 t (v) 289.437 245.782
t (i) 294.437 245.782 t (c) 296.659 245.782 t (e) 301.659 245.782 t (s) 307.220 245.782 t (G) 388.208
245.782 t (R) 395.986 245.782 t (I) 403.208 245.782 t (D) 405.986 245.782 t ( ) 413.208 245.782 t (S)
415.986 245.782 t (e) 422.656 245.782 t (r) 428.217 245.782 t (v) 431.547 245.782 t (i) 436.547 245.782
t (c) 438.769 245.782 t (e) 443.769 245.782 t (s) 449.330 245.782 t (U) 225.710 222.782 t (C) 232.932
222.782 t (D) 240.154 222.782 t (D) 330.459 219.032 t (a) 337.681 219.032 t (t) 343.242 219.032 t (a)
346.020 219.032 t ( ) 351.581 219.032 t (M) 354.359 219.032 t (i) 362.689 219.032 t (n) 364.911 219.032
t (i) 370.472 219.032 t (n) 372.694 219.032 t (g) 378.255 219.032 t (C) 393.459 219.532 t (r) 400.681
219.532 t (o) 404.011 219.532 t (s) 409.572 219.532 t (s) 414.572 219.532 t (m) 419.572 219.532 t (a)
427.902 219.532 t (t) 433.463 219.532 t (c) 436.241 219.532 t (h) 441.241 219.532 t (V) 391.600 161.782
t (i) 398.090 161.782 t (r) 400.312 161.782 t (t) 403.642 161.782 t (u) 406.420 161.782 t (a) 411.981
161.782 t (l) 417.542 161.782 t ( ) 419.764 161.782 t (D) 422.542 161.782 t (a) 429.764 161.782 t (t)
435.325 161.782 t (a) 438.103 161.782 t (W) 402.709 142.782 t (o) 411.967 142.782 t (r) 417.528 142.782
t (k) 420.858 142.782 t (f) 425.858 142.782 t (l) 428.636 142.782 t (o) 430.858 142.782 t (w) 436.419
142.782 t (A) 311.460 125.032 t (u) 318.130 125.032 t (t) 323.691 125.032 t (e) 326.469 125.032 t (n)
332.030 125.032 t (t) 337.591 125.032 t (i) 340.369 125.032 t (f) 342.591 125.032 t (i) 345.369 125.032
t (c) 347.591 125.032 t (a) 352.591 125.032 t (t) 358.152 125.032 t (i) 360.930 125.032 t (o) 363.152
125.032 t (n) 368.713 125.032 t ( ) 374.274 125.032 t (&) 377.052 125.032 t ( ) 383.722 125.032 t (A)
385.949 125.032 t (u) 392.619 125.032 t (t) 398.180 125.032 t (h) 400.958 125.032 t (o) 406.519 125.032
t (r) 412.080 125.032 t (i) 415.410 125.032 t (z) 417.632 125.032 t (a) 422.632 125.032 t (t) 428.193
125.032 t (i) 430.971 125.032 t (o) 433.193 125.032 t (n) 438.754 125.032 t (M) 232.709 107.282 t (y)
241.039 107.282 t ( ) 246.039 107.282 t (S) 248.817 107.282 t (p) 255.487 107.282 t (a) 261.048 107.282
t (c) 266.609 107.282 t (e) 271.609 107.282 t ( ) 277.170 107.282 t (s) 279.948 107.282 t (t) 284.948
107.282 t (o) 287.726 107.282 t (r) 293.287 107.282 t (a) 296.617 107.282 t (g) 302.178 107.282 t (e)
307.739 107.282 t ( ) 313.300 107.282 t (s) 316.078 107.282 t (e) 321.078 107.282 t (r) 326.639 107.282
t (v) 329.969 107.282 t (i) 334.969 107.282 t (c) 337.191 107.282 t (e) 342.191 107.282 t (D) 208.960
73.532 t (a) 216.182 73.532 t (t) 221.743 73.532 t (a) 224.521 73.532 t (b) 230.082 73.532 t (a) 235.643
73.532 t (s) 241.204 73.532 t (e) 246.204 73.532 t (s) 251.765 73.532 t (,) 256.765 73.532 t ( ) 259.543
73.532 t (P) 262.321 73.532 t (e) 268.991 73.532 t (r) 274.552 73.532 t (s) 277.882 73.532 t (i) 282.882
73.532 t (s) 285.104 73.532 t (t) 290.104 73.532 t (e) 292.882 73.532 t (n) 298.443 73.532 t (c) 304.004
73.532 t (y) 309.004 73.532 t (,) 313.263 73.532 t ( ) 316.041 73.532 t (R) 318.819 73.532 t (e) 326.041
73.532 t (p) 331.602 73.532 t (l) 337.163 73.532 t (i) 339.385 73.532 t (c) 341.607 73.532 t (a) 346.607
73.532 t (t) 352.168 73.532 t (i) 354.946 73.532 t (o) 357.168 73.532 t (n) 362.729 73.532 t (D) 228.710
50.782 t (i) 235.932 50.782 t (s) 238.154 50.782 t (k) 243.154 50.782 t (s) 248.154 50.782 t (,) 253.154
50.782 t ( ) 255.932 50.782 t (T) 258.530 50.782 t (a) 263.531 50.782 t (p) 269.092 50.782 t (e) 274.653
50.782 t (s) 280.214 50.782 t (,) 285.214 50.782 t ( ) 287.992 50.782 t (C) 290.770 50.782 t (P) 297.992
50.782 t (U) 304.662 50.782 t (s) 311.884 50.782 t (,) 316.884 50.782 t ( ) 319.662 50.782 t (F) 322.440
50.782 t (i) 328.548 50.782 t (b) 330.770 50.782 t (e) 336.331 50.782 t (r) 341.892 50.782 t (E) 109.461
95.782 t (x) 116.131 95.782 t (i) 121.131 95.782 t (s) 123.353 95.782 t (t) 128.353 95.782 t (i) 131.131
95.782 t (n) 133.353 95.782 t (g) 138.914 95.782 t ( ) 144.475 95.782 t (D) 147.253 95.782 t (a) 154.475
95.782 t (t) 160.036 95.782 t (a) 162.814 95.782 t ( ) 168.375 95.782 t (C) 171.153 95.782 t (e) 178.375
95.782 t (n) 183.936 95.782 t (t) 189.497 95.782 t (e) 192.275 95.782 t (r) 197.836 95.782 t (s) 201.166
95.782 t (G) 391.709 93.804 t (r) 399.487 93.804 t (i) 402.817 93.804 t (d) 405.039 93.804 t ( ) 410.600
93.804 t (M) 413.378 93.804 t (i) 421.708 93.804 t (d) 423.930 93.804 t (d) 429.491 93.804 t (l) 435.052
93.804 t (e) 437.274 93.804 t (w) 442.835 93.804 t (a) 450.057 93.804 t (r) 455.618 93.804 t (e) 458.948
93.804 t (D) 133.711 128.782 t (i) 140.933 128.782 t (g) 143.155 128.782 t (i) 148.716 128.782 t (t) 150.938
128.782 t (a) 153.716 128.782 t (l) 159.277 128.782 t ( ) 161.499 128.782 t (L) 164.277 128.782 t (i)
169.838 128.782 t (b) 172.060 128.782 t (r) 177.621 128.782 t (a) 180.951 128.782 t (r) 186.512 128.782
t (y) 189.842 128.782 t (A) 152.667 192.325 t (D) 159.337 192.325 t (S) 166.559 192.325 t 1 w
163.169 236.904 m
163.169 229.076 163.169 221.248 163.169 213.420 c
S
167.168 214.086 m
159.169 214.086 l
163.169 204.754 l
f
1.046 w
0 j
391.068 231.970 m
391.068 213.780 l
450.169 213.780 l
450.169 231.970 l
391.068 231.970 l
s
328.068 208.720 m
328.068 190.530 l
387.169 190.530 l
387.169 208.720 l
328.068 208.720 l
s
391.817 208.720 m
391.817 190.530 l
450.918 190.530 l
450.918 208.720 l
391.817 208.720 l
s
0.250 w
2 j
(V) 329.842 196.649 t (i) 336.332 196.649 t (s) 338.554 196.649 t (u) 343.554 196.649 t (a) 349.115 196.649
t (l) 354.676 196.649 t (i) 356.898 196.649 t (z) 359.120 196.649 t (a) 364.120 196.649 t (t) 369.681
196.649 t (i) 372.459 196.649 t (o) 374.681 196.649 t (n) 380.242 196.649 t (I) 406.342 196.649 t (m)
409.120 196.649 t (a) 417.450 196.649 t (g) 423.011 196.649 t (e) 428.572 196.649 t end restore
%%PageTrailer
showpage
%%Trailer
%%EOF
