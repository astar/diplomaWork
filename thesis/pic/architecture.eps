%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Xara X
%%For: (Unregistered user) (Unregistered company)
%%Title: (architeture.xar *)
%%CreationDate: (06/05/11) (05:45 PM)
%%BoundingBox: 49 44 512 425
%%HiResBoundingBox: 49.343 44.208 511.944 424.030
%%AWColourTable
%%+h (Red) 0.0 100.0 100.0
%%+h (Orange-Red) 15.0 100.0 100.0
%%+h (Orange) 30.0 100.0 100.0
%%+h (Orange-Yellow) 45.0 100.0 100.0
%%+h (Yellow) 60.0 100.0 100.0
%%+h (Yellow-Chartreuse) 75.0 100.0 100.0
%%+h (Chartreuse) 90.0 100.0 100.0
%%+h (Chartreuse-Green) 105.0 100.0 100.0
%%+h (Green) 120.0 100.0 100.0
%%+h (Green-SpringGreen) 135.0 100.0 100.0
%%+h (Spring Green) 150.0 100.0 100.0
%%+h (SpringGreen-Cyan) 165.0 100.0 100.0
%%+h (Cyan) 180.0 100.0 100.0
%%+h (Sky Blue) 195.0 100.0 100.0
%%+h (Mid Blue) 210.0 100.0 100.0
%%+h (MidBlue-Blue) 225.0 100.0 100.0
%%+h (Blue) 240.0 100.0 100.0
%%+h (Blue-Indigo) 255.0 100.0 100.0
%%+h (Indigo) 270.0 100.0 100.0
%%+h (Violet) 285.0 100.0 100.0
%%+h (Magenta) 300.0 100.0 100.0
%%+h (Magenta-Crimson) 315.0 100.0 100.0
%%+h (Crimson) 330.0 100.0 100.0
%%+h (Crimson-Red) 345.0 100.0 100.0
%%+h (Black) 0.0 0.0 0.0
%%+t (90% Black) 90
%%+t (80% Black) 80
%%+t (70% Black) 70
%%+t (60% Black) 60
%%+t (50% Black) 50
%%+t (40% Black) 40
%%+t (30% Black) 30
%%+t (20% Black) 20
%%+t (10% Black) 10
%%+h (White) 0.0 0.0 100.0
%%EndComments
%%BeginProlog

%%BeginResource: procset XaraStudio1Dict
% Copyright (c) 1995,1996 Xara Ltd
/XaraStudio1Dict 300 dict def XaraStudio1Dict begin
/bd{bind def}bind def/ld{load def}bind def/xd{exch def}bind def/sv{save}bd
/rs{restore}bd/gs{gsave}bd/gr{grestore}bd/bg{begin}bd/en{end}bd/level2
/languagelevel where{pop languagelevel 2 ge}{false}ifelse def/setseps{
/v_gseps xd}bd/setplate{/v_plate xd}bd/setkgray{/v_keyg xd}bd/setmono{
/v_mono xd}bd/rgb2gray{0.109 mul exch 0.586 mul add exch 0.305 mul
add}bd/cmyk2rgb{3{dup 5 -1 roll add dup 1 gt{pop 1}if 1 exch sub exch}repeat
pop}bd/rgb2cmyk{3{1.0 exch sub 3 1 roll}repeat 3 copy 2 copy gt{exch}if
pop 2 copy gt{exch}if pop dup 0.5 gt{0.5 sub dup 3{5 1 roll dup 3 1
roll sub}repeat 5 1 roll pop}{pop 0}ifelse}bd/cmyk2hsb{3{dup 5 -1 roll
add 1 exch sub dup 0 lt{pop 0}if exch}repeat pop rgb2hsb}bd/rgb2hsb{setrgbcolor
currenthsbcolor}bd/readcurve{exch 255.0 mul 0.5 add cvi get 255.0 div}bd
/rgb2devcmyk{3 copy dup 3 1 roll eq 3 1 roll eq v_keyg 1 eq and and{pop
pop 1 exch sub 0 0 0 4 -1 roll}{/ucurve where{pop 3{1.0 exch sub 3
1 roll}repeat 3 copy 2 copy gt{exch}if pop 2 copy gt{exch}if pop dup
ucurve readcurve exch bcurve readcurve clamp01 3{5 1 roll dup 3 1 roll
sub clamp01}repeat 5 1 roll pop 4 1 roll ycurve readcurve 4 1 roll
mcurve readcurve 4 1 roll ccurve readcurve 4 1 roll}{rgb2cmyk}ifelse}ifelse}def
/rgb2keyG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop pop}{Max3}ifelse
1 exch sub bcurve readcurve clamp01}bd/rgb2key{Max3 1 exch sub bcurve
readcurve clamp01}bd/rgb2cyanG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop
pop pop 0}{rgb2cyan}ifelse}bd/rgb2cyan{3 copy Max3 1 exch sub ucurve
readcurve 4 1 roll pop pop 1 exch sub exch sub ccurve readcurve clamp01}bd
/rgb2magentaG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop pop pop 0}{rgb2magenta}ifelse}bd
/rgb2magenta{3 copy Max3 1 exch sub ucurve readcurve 4 1 roll pop
1 exch sub 3 1 roll pop sub mcurve readcurve clamp01}bd/rgb2yellowG{3
copy dup 3 1 roll eq 3 1 roll eq and{pop pop pop 0}{rgb2yellow}ifelse}bd
/rgb2yellow{3 copy Max3 1 exch sub ucurve readcurve 4 1 roll 1 exch
sub 4 1 roll pop pop sub ycurve readcurve clamp01}bd/rgb2plategray{v_keyg
0 eq v_plate v_cpky eq{{rgb2key}{rgb2keyG}ifelse}{v_plate v_cpyl eq{{rgb2yellow}{rgb2yellowG}ifelse}{v_plate
v_cpmg eq{{rgb2magenta}{rgb2magentaG}ifelse}{v_plate v_cpcy eq{{rgb2cyan}{rgb2cyanG}ifelse}{{rgb2key}{rgb2keyG}ifelse}ifelse}ifelse}ifelse}ifelse
1 exch sub setgray}bd/dc{0 def}bd/aca{/v_cpnone 0 def/v_cpcy 1 def
/v_cpyl 2 def/v_cpmg 3 def/v_cpky 4 def/v_gseps 0 def/v_keyg 0 def
/v_plate v_cpnone def/v_mono 0 def/v_wr dc/v_fc dc/v_fm dc/v_fy dc
/v_fk dc/v_fg dc/v_fr dc/v_fg dc/v_fb dc/v_sc dc/v_sm dc/v_sy dc/v_sk
dc/v_sg dc/v_sr dc/v_sg dc/v_sb dc/v_sct 0 def/v_fct 0 def/v_ft 0 def
/v_cxe 0 def/v_cxm 0 def/v_sa -1 def/v_ea -1 def/sR dc/sG dc/sB dc
/mR dc/mG dc/mB dc/eR dc/eG dc/eB dc/sC dc/sM dc/sY dc/sK dc/eC dc
/eM dc/eY dc/eK dc/sH dc/sS dc/sV dc/eH dc/eS dc/eV dc/sGy dc/eGy
dc/mGy dc/ci_datasrc dc/ci_matrix dc/ci_dataleft dc/ci_buf dc/ci_dataofs
dc/ci_y dc/rciBuf dc/cbslw dc/cmiBuf dc/cPalette dc/cpci_datasrc dc
/cpci_matrix dc/cpci_bpp dc/cpci_y dc/cpci_sampsleft dc/cpci_nextcol
dc/cpci_buf dc/startX dc/startY dc/endX dc/endY dc/endX2 dc/endY2 dc
/fillX dc/urx dc/ury dc/llx dc/lly dc/incD dc/distance dc/slice dc
/startangle dc/Steps dc/incH dc/incS dc/incV dc/incR dc/incG dc/incB
dc/incGy dc 0.25 setlinewidth [] 0 setdash 0 setlinejoin 0 setlinecap}bd
aca/setplategray{v_plate v_cpky eq{1 exch sub setgray pop pop pop}{v_plate
v_cpyl eq{pop 1 exch sub setgray pop pop}{v_plate v_cpmg eq{pop pop
1 exch sub setgray pop}{v_plate v_cpcy eq{pop pop pop 1 exch sub setgray}{1
exch sub setgray pop pop pop}ifelse}ifelse}ifelse}ifelse}bd/setplatecolor{v_plate
v_cpky eq{1 exch sub 0 0 0 4 -1 roll setcmykcolor pop pop pop}{v_plate
v_cpyl eq{pop 1 exch sub 0 0 0 4 2 roll setcmykcolor pop pop}{v_plate
v_cpmg eq{pop pop 1 exch sub 0 0 0 4 1 roll setcmykcolor pop}{v_plate
v_cpcy eq{pop pop pop 1 exch sub 0 0 0 setcmykcolor}{1 exch sub 0 0
0 4 -1 roll setcmykcolor pop pop pop}ifelse}ifelse}ifelse}ifelse}bd
/setcmykcolor where{pop}{/setcmykcolor{cmyk2rgb setrgbcolor}bd}ifelse
/setlogcmykcolor{v_gseps 1 eq{v_mono 1 eq{1 exch sub setgray pop pop
pop}{setcmykcolor}ifelse}{v_mono 1 eq{cmyk2rgb rgb2gray setgray}{setcmykcolor}ifelse}ifelse}bd
/setlogrgbcolor{v_gseps 1 eq{v_mono 1 eq{rgbtoplategray}{rgb2devcmyk
setplatecolor}ifelse}{v_mono 1 eq{rgb2gray setgray}{systemdict begin
setrgbcolor end}ifelse}ifelse}bd/setfillcolor{v_fct 0 eq{v_fc v_fm
v_fy v_fk setlogcmykcolor}{v_fr v_fg v_fb setlogrgbcolor}ifelse}bd
/setstrokecolor{v_sct 0 eq{v_sc v_sm v_sy v_sk setlogcmykcolor}{v_sr
v_sg v_sb setlogrgbcolor}ifelse}bd/setgfillcmyk{v_gseps 1 eq{v_mono
1 eq{cmyk2rgb rgb2plategray}{cmyk2rgb rgb2devcmyk setplatecolor}ifelse}{v_mono
1 eq{cmyk2rgb rgb2gray setgray}{setcmykcolor}ifelse}ifelse}bd/setgfillrgb{v_gseps
1 eq{v_mono 1 eq{rgb2plategray}{rgb2devcmyk setplatecolor}ifelse}{v_mono
1 eq{rgb2gray setgray}{systemdict begin setrgbcolor end}ifelse}ifelse}bd
/setgfillhsb{v_gseps 1 eq{v_mono 1 eq{systemdict begin sethsbcolor
currentrgbcolor end rgb2plategray}{systemdict begin sethsbcolor currentrgbcolor
end rgb2devcmyk setplatecolor}ifelse}{v_mono 1 eq{systemdict begin
sethsbcolor currentgray end setgray}{systemdict begin sethsbcolor end}ifelse}ifelse}bd
/Max{2 copy lt{exch}if pop}bd/Max3{2 copy lt{exch}if pop 2 copy lt{exch}if
pop}bd/Min{2 copy gt{exch}if pop}bd/Min3{2 copy gt{exch}if pop 2 copy
gt{exch}if pop}bd/clamp{3 1 roll Max 2 1 roll Min}bd/clamp01{0 Max
1 Min}bd/Pythag{dup mul exch dup mul add sqrt}bd/ssc{DeviceRGB setcolorspace
setcolor}bd/ssg{setgray}bd/p_render{}def/p_count 0 def/vis_flag true
def/DataString 3 string def/DataSrc{currentfile DataString readhexstring
pop}bd/DataStr1 1 string def/DataStr2 1 string def/DataStr3 1 string
def/DataSrc1{DataStr1}bd/DataSrc2{DataStr2}bd/DataSrc3{DataStr3}bd
/colorimage where{pop/ci{colorimage}bd}{/ci{pop pop/ci_datasrc exch
def matrix invertmatrix/ci_matrix exch def pop/ci_dataleft 0 def/ci_buf()def
/ci_dataofs 0 def 0 1 3 -1 roll 1 sub{/ci_y exch def dup 0 1 3 -1
roll 1 sub{0 1 2{pop ci_dataleft 0 eq{ci_datasrc dup length/ci_dataleft
exch def/ci_buf exch def/ci_dataofs 0 def}if ci_buf ci_dataofs get
255 div/ci_dataofs ci_dataofs 1 add def/ci_dataleft ci_dataleft 1 sub
def}for setrgbcolor dup ci_y 3 -1 roll 1 add ci_y 1 add 4 copy 5 1
roll 4 2 roll 5 -1 roll 1 1 4{pop ci_matrix transform 8 2 roll}for
m l l l closepath fill}for}for pop}bd}ifelse/rci{/rciBuf 4 index 3
index mul 7 add 8 div floor cvi string def{currentfile rciBuf readhexstring
pop}bind false 3 ci}bd/cbsl{2 eq/cbslL2 xd 5 index/cbslw xd translate
scale 8 [ 3 index 0 0 5 index 0 0 ] cbslL2{/DataStr1 cbslw string def
currentfile/ASCII85Decode filter/RunLengthDecode filter DataStr1 readstring
pop pop/DataStr2 cbslw string def currentfile/ASCII85Decode filter
/RunLengthDecode filter DataStr2 readstring pop pop/DataStr3 cbslw
string def currentfile/ASCII85Decode filter/RunLengthDecode filter
DataStr3 readstring pop pop{DataStr1}bind{DataStr2}bind{DataStr3}bind
true}{/DataSrc load false}ifelse 3 ci}bd/gbsl{2 eq/gbslL2 xd 5 index
/gbslw xd translate scale 8 [ 3 index 0 0 5 index 0 0 ] gbslL2{/DataStr1
gbslw string def currentfile/ASCII85Decode filter/RunLengthDecode filter
DataStr1 readstring pop pop{DataStr1}bind}{/DataStr1 gbslw string def
currentfile DataSrc1 readhexstring pop pop{DataStr1}bind}ifelse image}bd
/cmi{/cmiBuf 4 index 3 index mul 7 add 8 div floor cvi string def{currentfile
cmiBuf readhexstring pop}bind image}bd/cpal{4 mul string/cPalette exch
def currentfile cPalette readhexstring pop}bd/cpci{/cpci_datasrc exch
def matrix invertmatrix/cpci_matrix exch def/cpci_bpp exch def cpci_init
0 1 3 -1 roll 1 sub{/cpci_y exch def dup cpci_bpp 4 eq{cpci_sampsleft
1 eq{/cpci_sampsleft 0 def}if}if 0 1 3 -1 roll 1 sub{cpci_nextcol dup
cpci_y 3 -1 roll 1 add cpci_y 1 add 4 copy 5 1 roll 4 2 roll 5 -1 roll
1 1 4{pop cpci_matrix transform 8 2 roll}for m l l l closepath fill}for}for
pop}bd/cpci_init{/cpci_sampsleft 0 def}bd/cpci_buf 1 string def/cpci_nextcol{cpci_bpp
1 eq{cpci_sampsleft 0 eq{currentfile cpci_buf readhexstring pop pop
/cpci_sampsleft 8 def}if cpci_buf dup 0 get dup 1 and setgray -1 bitshift
1 exch put/cpci_sampsleft cpci_sampsleft 1 sub def}{cpci_bpp 4 eq{cpci_sampsleft
0 eq{currentfile cpci_buf readhexstring pop pop/cpci_sampsleft 2 def}if
cpci_buf 0 get dup 15 and exch -4 bitshift cpci_buf 0 3 -1 roll put
/cpci_sampsleft cpci_sampsleft 1 sub def}{currentfile cpci_buf readhexstring
pop 0 get}ifelse 4 mul dup 2 add cPalette exch get 255 div exch dup
1 add cPalette exch get 255 div exch cPalette exch get 255 div setrgbcolor}ifelse}bd
/setup1asciiproc{[ currentfile mystring/readhexstring cvx/pop cvx
] cvx bind}bd/setup1binaryproc{[ currentfile mystring/readstring cvx
/pop cvx ] cvx bind}bd level2{save/dontloadlevel1 xd}if/iw 0 def/ih
0 def/im_save 0 def/setupimageproc 0 def/polarity 0 def/smoothflag
0 def/mystring 0 def/bpc 0 def/beginimage{/im_save save def dup 0 eq{pop
/setup1binaryproc}{1 eq{/setup1asciiproc}{(error, can't use level2 data acquisition procs for level1)print
flush}ifelse}ifelse/setupimageproc exch ld/polarity xd/smoothflag xd
/imat xd/mystring exch string def/bpc xd/ih xd/iw xd}bd/endimage{im_save
restore}bd/1bitbwcopyimage{1 setgray 0 0 moveto 0 1 rlineto 1 0 rlineto
0 -1 rlineto closepath fill 0 setgray iw ih polarity imat setupimageproc
imagemask}bd/1bitcopyimage{setrgbcolor 0 0 moveto 0 1 rlineto 1 0 rlineto
0 -1 rlineto closepath fill setrgbcolor iw ih polarity imat setupimageproc
imagemask}bd/1bitmaskimage{setrgbcolor iw ih polarity [iw 0 0 ih 0
0] setupimageproc imagemask}bd level2{dontloadlevel1 restore}if level2
not{save/dontloadlevel2 xd}if/setup2asciiproc{currentfile/ASCII85Decode
filter/RunLengthDecode filter}bd/setup2binaryproc{currentfile/RunLengthDecode
filter}bd/myimagedict 9 dict dup begin/ImageType 1 def/MultipleDataSource
false def end def/im_save 0 def/setupimageproc 0 def/polarity 0 def
/smoothflag 0 def/mystring 0 def/bpc 0 def/ih 0 def/iw 0 def/beginimage{
/im_save save def dup 2 eq{pop/setup2binaryproc}{dup 3 eq{pop/setup2asciiproc}{0
eq{/setup1binaryproc}{/setup1asciiproc}ifelse}ifelse}ifelse/setupimageproc
exch ld{[ 1 0 ]}{[ 0 1 ]}ifelse/polarity xd/smoothflag xd/imat xd/mystring
exch string def/bpc xd/ih xd/iw xd}bd/endimage{im_save restore}bd/1bitbwcopyimage{1
ssg 0 0 moveto 0 1 rlineto 1 0 rlineto 0 -1 rlineto closepath fill
0 ssg myimagedict dup begin/Width iw def/Height ih def/Decode polarity
def/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd/1bitcopyimage{ssc
0 0 moveto 0 1 rlineto 1 0 rlineto 0 -1 rlineto closepath fill ssc
myimagedict dup begin/Width iw def/Height ih def/Decode polarity def
/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd/1bitmaskimage{ssc
myimagedict dup begin/Width iw def/Height ih def/Decode polarity def
/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd level2 not{dontloadlevel2
restore}if
level2{save/dontloadlevel1 xd}if/startnoload{{/noload save def}if}bd
/endnoload{{noload restore}if}bd/testsystemdict{where{systemdict eq{true}{false}ifelse}{false}ifelse}bd
/ncolors 1 def/colorimage where{pop true}{false}ifelse{/ncolors 0
statusdict begin/processcolors where{pop pop processcolors}{/deviceinfo
where{pop deviceinfo/Colors known{pop{deviceinfo/Colors get}}if}if}ifelse
end def ncolors 0 ne{/colorimage testsystemdict/setcolortransfer testsystemdict
/currentcolortransfer testsystemdict/currentcmykcolor testsystemdict
and and and not{/ncolors 0 def}if}if}if ncolors dup 1 ne exch dup 3
ne exch 4 ne and and{/ncolors 0 def}if ncolors 1 eq dup dup not startnoload{
/expandbw{expandfactor mul round cvi bwclut exch get 255 div}bd/doclutimage{bwclut
colorclut pop/bwclut xd bpc dup 8 eq{pop 255}{4 eq{15}{3}ifelse}ifelse
/expandfactor xd [/expandbw load/exec load dup currenttransfer exch
] cvx bind settransfer iw ih bpc imat setupimageproc image}bd}if not
endnoload ncolors dup 3 eq exch 4 eq or dup dup not startnoload{/nullproc{{}}def
/concatutil{/exec load 7 -1 roll/exec load}bd/defsubclut{1 add getinterval
def}bd/spconcattransfer{/Dclut exch def/Cclut exch def/Bclut exch def
/Aclut exch def/ncompute exch ld currentcolortransfer [{Aclut ncompute}concatutil
] cvx [{Bclut ncompute}concatutil ] cvx [{Cclut ncompute}concatutil
] cvx [{Dclut ncompute}concatutil ] cvx setcolortransfer}bd/setuprgbcluts{
/bit3x rgbclut length 3 sub def/bit1x bit3x 3 idiv def/rclut rgbclut
def/gclut rclut 1 bit3x defsubclut/bclut rclut 2 bit3x defsubclut}bd}if
not endnoload ncolors 3 eq dup dup not startnoload{/3compute{exch bit3x
mul round cvi get 255 div}bd/doclutimage{/rgbclut xd pop setuprgbcluts
/3compute rclut gclut bclut dup spconcattransfer iw ih bpc imat [
setupimageproc/exec load/dup load dup ] cvx nullproc nullproc true
3 colorimage}bd}if not endnoload ncolors 4 eq dup dup not startnoload{
/stuffclut{cmykindex 3 -1 roll put}bd/ftoint{1 exch sub 255 mul round
cvi}bd/4compute{exch bit4x mul round cvi get 255 div}bd/computecmykclut{setuprgbcluts
/bit4x rgbclut length 3 idiv 4 mul 4 sub def/cmykclut bit4x 4 add
string def/cclut cmykclut def/mclut cclut 1 bit4x defsubclut/yclut
cclut 2 bit4x defsubclut/kclut cclut 3 bit4x defsubclut/cmykindex 0
def 0 1 bit1x{dup/cmykindex exch bit1x exch sub 4 mul def 3 mul dup
rclut exch get 255 div exch dup gclut exch get 255 div exch bclut exch
get 255 div setrgbcolor currentcmykcolor ftoint kclut stuffclut ftoint
yclut stuffclut ftoint mclut stuffclut ftoint cclut stuffclut}for}bd
/doclutimage{/rgbclut xd pop invalidcolortable?{computecmykclut}if
/4compute cclut mclut yclut kclut spconcattransfer iw ih bpc imat
[ setupimageproc/exec load/dup load dup dup ] cvx nullproc nullproc
nullproc true 4 colorimage}bd}if not endnoload ncolors 0 eq dup dup
not startnoload{/lookupandstore{3 mul 3 getinterval putinterval exch
3 add exch 3 copy}bd/8lookup/lookupandstore ld/4lookup{/byte 1 index
def -4 bitshift lookupandstore byte 15 and lookupandstore}bd/2lookup{
/byte 1 index def -6 bitshift lookupandstore byte -4 bitshift 3 and
lookupandstore byte -2 bitshift 3 and lookupandstore byte 3 and lookupandstore}bd
/colorexpand{mystringexp 0 rgbclut 3 copy 7 -1 roll/mylookup load
forall pop pop pop pop pop}bd/createexpandstr{/mystringexp exch mystring
length mul string def}bd/doclutimage{/rgbclut xd pop/mylookup bpc 8
eq{3 createexpandstr/8lookup}{bpc 4 eq{6 createexpandstr/4lookup}{12
createexpandstr/2lookup}ifelse}ifelse ld iw ih bpc imat [ setupimageproc
/exec load/colorexpand load/exec load] cvx false 3 colorimage}bd}if
not endnoload/colorimage where{pop true}{false}ifelse dup{/do24image{iw
ih 8 imat setupimageproc false 3 colorimage}bd}if dup dup startnoload
not{/rgbtogray{/str xd/len str length def/smlen len 3 idiv def/rstr
str def/gstr str 1 len 1 sub getinterval def/bstr str 2 len 2 sub getinterval
def str dup 0 1 smlen 1 sub{dup 3 mul rstr 1 index get .3 mul gstr
2 index get .59 mul add bstr 3 -1 roll get .11 mul add round cvi put
dup}for pop 0 smlen getinterval}bd/do24image{iw ih 8 imat [ setupimageproc
/exec load/rgbtogray load/exec load ] cvx bind image}bd}if endnoload
/doimage{iw ih 8 imat setupimageproc image}bd level2{dontloadlevel1
restore}if level2 not{save/dontloadlevel2 xd}if/myappcolorspace/DeviceRGB
def/rgbclut 0 def/doclutimage{/rgbclut xd pop bpc dup 8 eq{pop 255}{4
eq{15}{3}ifelse}ifelse/hival xd [/Indexed myappcolorspace hival rgbclut]
setcolorspace myimagedict dup begin/Width iw def/Height ih def/Decode
[0 hival] def/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
bpc def/Interpolate smoothflag def end image}bd/do24image{myappcolorspace
setcolorspace myimagedict dup begin/Width iw def/Height ih def/Decode
[0 1 0 1 0 1] def/ImageMatrix imat def/DataSource setupimageproc def
/BitsPerComponent 8 def/Interpolate smoothflag def end image}bd level2
not{dontloadlevel2 restore}if
/NumSteps{dtransform matrix defaultmatrix idtransform Pythag currentscreen
pop pop 72 exch div div}bd/FindMinSteps{v_ft 4 eq{urx startX sub abs
llx startX sub abs Max ury startY sub abs lly startY sub abs Max Pythag
2 3.14159265 mul mul 0}{v_ft 2 eq{endY startY sub endX startX sub Pythag
endY2 startY sub endX2 startX sub Pythag gt{endY startY sub endX startX
sub}{endY2 startY sub endX2 startX sub}ifelse}{endY startY sub endX
startX sub}ifelse}ifelse NumSteps}bd/cxe{/v_cxe exch def}bd/cxm{pop
/v_cxm exch def}bd/cxmt{pop pop}bd/cxt{pop}bd/S_eoclip{currentflat{{eoclip}stopped{dup
currentflat exch sub 20 gt{([Error: PathTooComplex; OffendingCommand: eoclip]\n)print
flush exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/S_clip{currentflat{{clip}stopped{dup currentflat exch sub 20 gt{([Error: PathTooComplex; OffendingCommand: clip]\n)print
flush exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/S_eofill{currentflat{{eofill}stopped{dup currentflat exch sub 20
gt{([Error: PathTooComplex; OffendingCommand: eofill]\n)print flush
exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/gpbbx{pathbbox/ury exch def/urx exch def/lly exch def/llx exch def}bd
/lineargfill{initgfill{false initgfx/distance endX startX sub endY
startY sub Pythag def/incD distance Steps div def endY startY sub endX
startX sub atan newpath llx lly urx ury Bx startX startY translate
rotate gpbbx eGy ssg newpath llx lly urx ury Bx S_eofill sGy ssg newpath
llx lly 0 ury Bx S_eofill/fillX 0 def 0 1 Steps 1 sub{stepgfx newpath
fillX lly fillX incD add dup/fillX exch def ury Bx S_eofill pop}for}if}bd
/radialgfill{initgfill{false initgfx/distance endX startX sub endY
startY sub Pythag def/incD distance Steps div def eGy ssg newpath llx
lly urx ury Bx S_eofill/distance 0 def 0 1 Steps 1 sub{stepgfx newpath
startX startY distance 0 360 arc closepath distance incD add dup/distance
exch def 0 rmoveto startX startY distance 0 360 arc closepath S_eofill
pop}for}if}bd/ellipticgfill{initgfill{true initgfx sGy ssg newpath
llx lly urx ury Bx S_eofill [ endX startX sub endY startY sub endX2
startX sub endY2 startY sub startX startY ] concat Steps 1 sub -1 0{stepgfx
/i exch def 0 0 moveto 0 0 i Steps div 0 360 arc fill}for}if}bd/conicalgfill{initgfill{urx
startX sub abs llx startX sub abs Max ury startY sub abs lly startY
sub abs Max Pythag startY endY sub startX endX sub Pythag div/radius
exch def true initgfx [ endX startX sub endY startY sub startY endY
sub endX startX sub startX startY ] concat/slice 180 Steps div def
/startangle 0 def Steps -1 0{pop stepgfx 0 0 moveto 0 0 radius startangle
neg dup slice add arc fill 0 0 moveto 0 0 radius startangle dup slice
add dup/startangle exch def arc fill}for}if}bd/initgfill{gpbbx{S_eoclip}{S_clip}ifelse
startX endX eq startY endY eq and sGy eGy eq or dup{sGy ssg newpath
llx lly urx ury Bx S_eofill}if not}bd/initgfx{/flag exch def flag{sGy
eGy/sGy exch def/eGy exch def}if eGy sGy sub abs 256 mul FindMinSteps
Min 256 Min ceiling 1 Max/Steps exch def eGy sGy sub Steps div/incGy
exch def sGy/mGy exch def}bd/stepgfx{mGy ssg mGy incGy add/mGy exch
def}bd/linearfill{initfill{false initfx endX startX sub endY startY
sub Pythag/distance exch def/incD distance Steps div def endY startY
sub endX startX sub atan newpath llx lly urx ury Bx startX startY translate
rotate gpbbx v_cxe 0 eq{eR eG eB setgfillrgb}{eH eS eV setgfillhsb}ifelse
newpath llx lly urx ury Bx S_eofill v_cxe 0 eq{sR sG sB setgfillrgb}{sH
sS sV setgfillhsb}ifelse newpath llx lly 0 ury Bx S_eofill/fillX 0
def 0 1 Steps 1 sub{stepfx newpath fillX lly fillX incD add dup/fillX
exch def ury Bx S_eofill pop}for}if}bd/radialfill{initfill{false initfx
endX startX sub endY startY sub Pythag/distance exch def/incD distance
Steps div def v_cxe 0 eq{eR eG eB setgfillrgb}{eH eS eV setgfillhsb}ifelse
newpath llx lly urx ury Bx S_eofill/distance 0 def 0 1 Steps 1 sub{stepfx
newpath startX startY distance 0 360 arc closepath distance incD add
dup/distance exch def 0 rmoveto startX startY distance 0 360 arc closepath
S_eofill pop}for}if}bind def/ellipticalfill{initfill{true initfx v_cxe
0 eq{sR sG sB setgfillrgb}{sH sS sV setgfillhsb}ifelse newpath llx
lly urx ury Bx S_eofill [ endX startX sub endY startY sub endX2 startX
sub endY2 startY sub startX startY ] concat Steps 1 sub -1 0{stepfx
/i exch def 0 0 moveto 0 0 i Steps div 0 360 arc fill}for v_cxe 0
eq{sR sG sB eR eG eB/sB exch def/sG exch def/sR exch def/eB exch def
/eG exch def/eR exch def}if}if}bd/conicalfill{initfill{urx startX
sub abs llx startX sub abs Max ury startY sub abs lly startY sub abs
Max Pythag startY endY sub startX endX sub Pythag div/radius exch def
true initfx [ endX startX sub endY startY sub startY endY sub endX
startX sub startX startY ] concat/slice 180 Steps div def/startangle
0 def Steps -1 0{pop stepfx 0 0 moveto 0 0 radius startangle neg dup
slice add arc fill 0 0 moveto 0 0 radius startangle dup slice add dup
/startangle exch def arc fill}for}if}bd/initfill{gpbbx{S_eoclip}{S_clip}ifelse
startX endX eq startY endY eq and v_cxe 2 ne sR eR eq sG eG eq and
sB eB eq and and or dup{sR sG sB setgfillrgb newpath llx lly urx ury
Bx S_eofill}if not}bd/initfx{/flag exch def v_cxe 0 eq{flag{sR sG sB
eR eG eB/sB exch def/sG exch def/sR exch def/eB exch def/eG exch def
/eR exch def}if eR sR sub abs 256 mul eG sG sub abs 256 mul Max eB
sB sub abs 256 mul Max FindMinSteps Min 256 Min ceiling 1 Max/Steps
exch def/incR eR sR sub Steps div def/incG eG sG sub Steps div def
/incB eB sB sub Steps div def sR/mR exch def sG/mG exch def sB/mB
exch def}{sR sG sB rgb2hsb/sV exch def/sS exch def/sH exch def eR eG
eB rgb2hsb/eV exch def/eS exch def/eH exch def eH sH sub abs v_cxe
1 eq{dup 0.5 gt{1 exch sub}if}{dup 0.5 lt{1 exch sub}if}ifelse 256
mul eS sS sub abs 256 mul Max eV sV sub abs 256 mul Max FindMinSteps
Min 256 Min ceiling 1 Max/Steps exch def v_cxe 1 eq{/incH eH sH sub
dup abs 0.5 gt{dup 0 ge{1 sub}{1 add}ifelse}if Steps div def/incS eS
sS sub Steps div def/incV eV sV sub Steps div def}{/incH eH sH sub
dup abs 0.5 le{dup 0 ge{1 sub}{1 add}ifelse}if Steps div def/incS eS
sS sub Steps div def/incV eV sV sub Steps div def}ifelse flag{/sH eH
/eH sH def def/sS eS/eS sS def def/sV eV/eV sV def def/incH incH neg
def/incS incS neg def/incV incV neg def}if}ifelse}bd/stepfx{v_cxe 0
eq{mR mG mB setgfillrgb mR incR add/mR exch def mG incG add/mG exch
def mB incB add/mB exch def}{sH sS sV setgfillhsb sH incH add dup 0
le{1 add}{dup 1 ge{1 sub}if}ifelse/sH exch def sS incS add/sS exch
def sV incV add/sV exch def}ifelse}bd
/ar{}bd/arr{pop pop pop pop pop pop pop}bd/ae{pop pop pop pop pop
pop}bd/aoa{pop}bd/apl{pop}bd/apc{}bd/aof{pop pop}bd/aafs{pop pop pop}bd
/O{pop}bd/R{pop}bd/axop{pop pop pop pop}bd/g{/v_ft 0 def/v_fc 0 def
/v_fm 0 def/v_fy 0 def 1 exch sub/v_fk exch def/v_fct 0 def}bd/G{
/v_sc 0 def/v_sm 0 def/v_sy 0 def 1 exch sub/v_sk exch def/v_sct 0
def}bd/k{/v_fk exch def/v_fy exch def/v_fm exch def/v_fc exch def/v_ft
0 def/v_fct 0 def}bd/K{/v_sk exch def/v_sy exch def/v_sm exch def/v_sc
exch def/v_sct 0 def}bd/Xa{/v_fb exch def/v_fg exch def/v_fr exch def
/v_ft 0 def/v_fct 1 def}bd/XA{/v_sb exch def/v_sg exch def/v_sr exch
def/v_sct 1 def}bd/a_tc{exch pop 1 exch sub dup 3 -1 roll exch div
exch dup 4 -1 roll exch div 3 1 roll dup 5 -1 roll exch div 4 1 roll
5 -1 roll exch div 4 1 roll}bd/x{a_tc k}bd/X{a_tc K}bd/Xx{0 eq{x}{pop
pop Xa}ifelse}bd/XX{0 eq{X}{pop pop XA}ifelse}bd/awr{/v_wr exch def}bd
/w{setlinewidth}bd/j{setlinejoin}bd/J{setlinecap}bd/d{setdash}bd/asc{pop
pop J}bd/aec{pop pop J}bd/csah{pop pop pop}bd/ceah{pop pop pop}bd/cst{pop
pop}bd/cdp{pop}bd/m{moveto}bd/l{lineto}bd/c{curveto}bd/Bx{4 copy 5
1 roll 4 2 roll 5 -1 roll m l l l closepath}bd/Cp{Bx clip newpath}bd
/a_fp{gsave v_wr 0 ne v_ft 0 eq{setfillcolor{eofill}{fill}ifelse}{v_ft
1 eq{linearfill}{v_ft 2 eq{ellipticalfill}{v_ft 3 eq{radialfill}{v_ft
4 eq{conicalfill}{v_ft 8 eq{lineargfill}{v_ft 9 eq{ellipticgfill}{v_ft
10 eq{radialgfill}{conicalgfill}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse
grestore}bd/*u{/p_count p_count 1 add def}bd/*U{/p_count p_count 1
sub def p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd/B{/p_render{a_fp
setstrokecolor stroke}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/b{closepath B}bd/F{/p_render{a_fp newpath}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/f{closepath F}bd/S{/p_render{setstrokecolor stroke}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/s{closepath S}bd/H{/p_render{newpath}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/h{closepath H}bd/N{H}bd/n{h}bd/cag{dup 7 add/v_ft exch def dup 2
eq{pop/endY2 exch def/endX2 exch def}{7 eq{pop pop/v_ft 8 def}if}ifelse
/endY exch def/endX exch def/startY exch def/startX exch def/eGy exch
def/sGy exch def}bd/caz{dup/v_ft exch def dup 2 eq{pop/endY2 exch def
/endX2 exch def}{7 eq{pop pop/v_ft 1 def}if}ifelse/endY exch def/endX
exch def/startY exch def/startX exch def/eB exch def/eG exch def/eR
exch def/sB exch def/sG exch def/sR exch def}bd/cax{dup/v_ft exch def
dup 2 eq{pop/endY2 exch def/endX2 exch def}{7 eq{pop pop/v_ft 1 def}if}ifelse
/endY exch def/endX exch def/startY exch def/startX exch def pop pop
8 3 roll pop pop/sB exch def/sG exch def/sR exch def/eB exch def/eG
exch def/eR exch def}bd/axm{/endY exch def/endX exch def/startY exch
def/startX exch def}bd/alyr{pop pop 1 eq{true}{false}ifelse/vis_flag
exch def pop pop}bd
/t{moveto show}bd/ts{moveto false charpath S}bd/tf{moveto true charpath
F}bd/tb{3 copy moveto true charpath F moveto false charpath S}bd/selectfont
where{pop}{/selectfont{dup type/integertype eq{exch findfont exch scalefont
setfont}{exch findfont exch makefont setfont}ifelse}bd}ifelse/sf{selectfont}bd
/u{}bd/U{}bd/anu{pop}bd
end
%%EndResource
%%EndProlog
%%BeginSetup
save XaraStudio1Dict begin
%%EndSetup
0 cxe
2 0 cxm
1 awr
0.00 0.00 0.00 (Black) 0 1 XX
1.048 w
0 j
[ ] 0 d
0 J
138.189 423.507 m
138.189 397.970 l
511.420 397.970 l
511.420 423.507 l
138.189 423.507 l
s
0.226 w
137.799 392.124 m
137.799 352.756 l
511.030 352.756 l
511.030 392.124 l
137.799 392.124 l
s
1.046 w
99.675 303.806 m
99.675 295.403 l
473.821 295.403 l
473.821 303.806 l
99.675 303.806 l
s
1.047 w
99.792 293.371 m
99.792 267.879 l
190.455 267.879 l
190.455 293.371 l
99.792 293.371 l
s
382.733 293.375 m
382.733 267.873 l
472.958 267.873 l
472.958 293.375 l
382.733 293.375 l
s
241.747 293.375 m
241.747 267.873 l
331.972 267.873 l
331.972 293.375 l
241.747 293.375 l
s
1.048 w
99.839 265.517 m
99.839 239.980 l
473.070 239.980 l
473.070 265.517 l
99.839 265.517 l
s
1.046 w
382.620 177.138 m
382.620 158.948 l
456.571 158.948 l
456.571 177.138 l
382.620 177.138 l
s
1.043 w
345.642 158.823 m
345.642 140.667 l
456.573 140.667 l
456.573 158.823 l
345.642 158.823 l
s
1.044 w
308.665 140.827 m
308.665 122.671 l
456.572 122.671 l
456.572 140.827 l
308.665 140.827 l
s
1.046 w
207.025 239.345 m
207.025 221.155 l
280.976 221.155 l
280.976 239.345 l
207.025 239.345 l
s
1.186 w
104.352 122.650 m
104.352 71.340 l
254.150 71.340 l
254.150 122.650 l
104.352 122.650 l
s
1.048 w
104.418 70.269 m
104.418 44.732 l
501.786 44.732 l
501.786 70.269 l
104.418 70.269 l
s
1.186 w
351.595 122.654 m
351.595 71.344 l
501.393 71.344 l
501.393 122.654 l
351.595 122.654 l
s
1.044 w
1.00 1.00 1.00 (White) 0 1 Xx
227.547 123.078 m
227.547 104.922 l
375.454 104.922 l
375.454 123.078 l
227.547 123.078 l
b
189.852 89.328 m
189.852 71.172 l
414.226 71.172 l
414.226 89.328 l
189.852 89.328 l
b
1.046 w
152.736 209.095 m
152.736 190.905 l
186.111 190.905 l
186.111 209.095 l
152.736 209.095 l
s
1.047 w
132.275 147.996 m
132.275 122.504 l
206.226 122.504 l
206.226 147.996 l
132.275 147.996 l
s
1.046 w
334.582 235.345 m
334.582 217.155 l
393.683 217.155 l
393.683 235.345 l
334.582 235.345 l
s
0.60 0.60 0.60 (40% Black) 0 1 XX
4 w
2 j
0.60 0.60 0.60 (40% Black) 0 1 Xx
109.468 239.530 m
109.468 204.577 109.468 169.620 109.468 134.667 c
S
115.467 135.666 m
103.468 135.666 l
109.468 121.668 l
f
136.468 239.530 m
136.468 213.401 136.468 187.270 136.468 161.142 c
S
142.467 162.141 m
130.468 162.141 l
136.468 148.143 l
f
0.00 0.00 0.00 (Black) 0 1 XX
1 w
0.00 0.00 0.00 (Black) 0 1 Xx
295.468 239.531 m
295.468 203.281 295.468 167.028 295.468 130.778 c
S
299.467 131.444 m
291.468 131.444 l
295.468 122.112 l
f
321.468 141.531 m
321.468 171.294 321.468 201.058 321.468 230.822 c
S
321.468 230.155 m
324.800 230.155 l
325.297 230.155 325.658 231.029 325.467 231.488 c
322.134 239.487 l
322.013 239.777 321.782 240.154 321.468 240.154 c
321.153 240.154 320.922 239.777 320.801 239.487 c
317.468 231.488 l
317.277 231.029 317.638 230.155 318.135 230.155 c
f
0.60 0.60 0.60 (40% Black) 0 1 XX
4 w
0.60 0.60 0.60 (40% Black) 0 1 Xx
491.468 123.899 m
491.468 195.877 491.468 267.857 491.468 339.835 c
S
485.468 338.835 m
497.467 338.835 l
491.468 352.833 l
f
0.00 0.00 0.00 (Black) 0 1 XX
1 w
0.00 0.00 0.00 (Black) 0 1 Xx
259.468 221.410 m
259.468 191.277 259.468 161.144 259.468 131.011 c
S
263.467 131.677 m
255.468 131.677 l
259.468 122.345 l
f
224.468 221.410 m
224.468 191.588 224.468 161.764 224.468 131.940 c
S
228.467 132.606 m
220.468 132.606 l
224.468 123.274 l
f
0.60 0.60 0.60 (40% Black) 0 1 XX
4 w
0.60 0.60 0.60 (40% Black) 0 1 Xx
468.468 123.531 m
468.468 157.966 468.468 192.403 468.468 226.838 c
S
462.468 225.838 m
474.467 225.838 l
468.468 239.836 l
f
279.468 325.326 m
279.468 328.143 279.468 330.960 279.468 333.777 c
279.468 335.797 279.468 337.818 279.468 339.838 c
S
273.468 338.838 m
285.467 338.838 l
279.468 352.836 l
f
279.466 334.199 m
279.466 316.254 l
S
285.465 317.253 m
273.466 317.253 l
279.466 303.255 l
f
0.250 w
0.00 0.00 0.00 (Black) 0 1 Xx
/Times-Roman 10 sf (w) 49.468 394.532 t (r) 49.468 394.532 t (r) 49.468 394.532 t (e) 49.468 394.532 t
(w) 49.468 394.532 t (r) 49.468 394.532 t (e) 49.468 394.532 t (w) 49.468 394.532 t /Times-Roman 12 sf
(P) 234.468 406.532 t (o) 242.472 406.532 t (r) 249.146 406.532 t (t) 253.142 406.532 t (a) 256.476 406.532
t (l) 263.150 406.532 t (s) 265.816 406.532 t (,) 271.816 406.532 t ( ) 275.150 406.532 t (U) 278.484
406.532 t (s) 287.150 406.532 t (e) 293.150 406.532 t (r) 299.824 406.532 t ( ) 303.820 406.532 t (I)
307.154 406.532 t (n) 310.488 406.532 t (t) 317.162 406.532 t (e) 320.496 406.532 t (r) 327.170 406.532
t (f) 331.166 406.532 t (a) 334.500 406.532 t (c) 341.174 406.532 t (e) 347.174 406.532 t (s) 353.848
406.532 t (,) 359.848 406.532 t ( ) 363.182 406.532 t (T) 366.300 406.532 t (o) 372.301 406.532 t (o)
378.975 406.532 t (l) 385.649 406.532 t (s) 388.315 406.532 t 0.00 0.00 0.00 (Black) 0 1 XX
1.046 w
0 j
148.313 381.595 m
148.313 363.405 l
181.688 363.405 l
181.688 381.595 l
148.313 381.595 l
s
0.250 w
2 j
/Times-Roman 10 sf (A) 150.968 369.032 t (l) 157.638 369.032 t (a) 159.860 369.032 t (d) 165.421 369.032
t (i) 170.982 369.032 t (n) 173.204 369.032 t 1.046 w
0 j
224.687 381.595 m
224.687 363.405 l
258.062 363.405 l
258.062 381.595 l
224.687 381.595 l
s
0.250 w
2 j
(T) 226.741 369.532 t (o) 231.742 369.532 t (p) 237.303 369.532 t (c) 242.864 369.532 t (a) 247.864 369.532
t (t) 253.425 369.532 t 1.046 w
0 j
301.061 381.595 m
301.061 363.405 l
334.436 363.405 l
334.436 381.595 l
301.061 381.595 l
s
0.250 w
2 j
(S) 306.066 369.532 t (p) 312.736 369.532 t (l) 318.297 369.532 t (a) 320.519 369.532 t (t) 326.080 369.532
t 1.046 w
0 j
363.794 381.595 m
363.794 363.405 l
424.451 363.405 l
424.451 381.595 l
363.794 381.595 l
s
0.250 w
2 j
(V) 368.641 369.157 t (O) 375.311 369.157 t (D) 383.089 369.157 t (e) 390.311 369.157 t (s) 395.872 369.157
t (k) 400.872 369.157 t (t) 405.872 369.157 t (o) 408.650 369.157 t (p) 414.211 369.157 t 1.046 w
0 j
440.168 381.595 m
440.168 363.405 l
500.825 363.405 l
500.825 381.595 l
440.168 381.595 l
s
0.250 w
2 j
(A) 448.341 368.657 t (s) 455.011 368.657 t (t) 460.011 368.657 t (r) 462.789 368.657 t (o) 466.119 368.657
t (G) 471.680 368.657 t (r) 479.458 368.657 t (i) 482.788 368.657 t (d) 485.010 368.657 t (R) 108.468
277.032 t (e) 115.690 277.032 t (g) 121.251 277.032 t (i) 126.812 277.032 t (s) 129.034 277.032 t (t)
134.034 277.032 t (r) 136.812 277.032 t (y) 140.142 277.032 t ( ) 145.142 277.032 t (S) 147.920 277.032
t (e) 154.590 277.032 t (r) 160.151 277.032 t (v) 163.481 277.032 t (i) 168.481 277.032 t (c) 170.703
277.032 t (e) 175.703 277.032 t (D) 255.474 277.032 t (a) 262.696 277.032 t (t) 268.257 277.032 t (a)
271.035 277.032 t ( ) 276.596 277.032 t (S) 279.374 277.032 t (e) 286.044 277.032 t (r) 291.605 277.032
t (v) 294.935 277.032 t (i) 299.935 277.032 t (c) 302.157 277.032 t (e) 307.157 277.032 t (s) 312.718
277.032 t (C) 391.718 277.032 t (o) 398.940 277.032 t (m) 404.501 277.032 t (p) 412.831 277.032 t (u)
418.392 277.032 t (t) 423.953 277.032 t (e) 426.731 277.032 t ( ) 432.292 277.032 t (S) 435.070 277.032
t (e) 441.740 277.032 t (r) 447.301 277.032 t (v) 450.631 277.032 t (i) 455.631 277.032 t (c) 457.853
277.032 t (e) 462.853 277.032 t (H) 107.468 249.532 t (T) 114.690 249.532 t (T) 120.798 249.532 t (P)
126.906 249.532 t ( ) 133.396 249.532 t (S) 136.174 249.532 t (e) 142.844 249.532 t (r) 148.405 249.532
t (v) 151.735 249.532 t (i) 156.735 249.532 t (c) 158.957 249.532 t (e) 163.957 249.532 t (s) 169.518
249.532 t (S) 250.249 249.532 t (O) 256.919 249.532 t (A) 264.697 249.532 t (P) 271.367 249.532 t ( )
277.857 249.532 t (S) 280.635 249.532 t (e) 287.305 249.532 t (r) 292.866 249.532 t (v) 296.196 249.532
t (i) 301.196 249.532 t (c) 303.418 249.532 t (e) 308.418 249.532 t (s) 313.979 249.532 t (G) 394.967
249.532 t (R) 402.745 249.532 t (I) 409.967 249.532 t (D) 412.745 249.532 t ( ) 419.967 249.532 t (S)
422.745 249.532 t (e) 429.415 249.532 t (r) 434.976 249.532 t (v) 438.306 249.532 t (i) 443.306 249.532
t (c) 445.528 249.532 t (e) 450.528 249.532 t (s) 456.089 249.532 t (U) 232.468 226.532 t (C) 239.690
226.532 t (D) 246.912 226.532 t (D) 337.218 222.782 t (a) 344.440 222.782 t (t) 350.001 222.782 t (a)
352.779 222.782 t ( ) 358.340 222.782 t (M) 361.118 222.782 t (i) 369.448 222.782 t (n) 371.670 222.782
t (i) 377.231 222.782 t (n) 379.453 222.782 t (g) 385.014 222.782 t (C) 400.218 223.282 t (r) 407.440
223.282 t (o) 410.770 223.282 t (s) 416.331 223.282 t (s) 421.331 223.282 t (m) 426.331 223.282 t (a)
434.661 223.282 t (t) 440.222 223.282 t (c) 443 223.282 t (h) 448 223.282 t (V) 398.359 165.532 t (i)
404.849 165.532 t (r) 407.071 165.532 t (t) 410.401 165.532 t (u) 413.179 165.532 t (a) 418.740 165.532
t (l) 424.301 165.532 t ( ) 426.523 165.532 t (D) 429.301 165.532 t (a) 436.523 165.532 t (t) 442.084
165.532 t (a) 444.862 165.532 t (W) 409.468 146.532 t (o) 418.726 146.532 t (r) 424.287 146.532 t (k)
427.617 146.532 t (f) 432.617 146.532 t (l) 435.395 146.532 t (o) 437.617 146.532 t (w) 443.178 146.532
t (A) 318.218 128.782 t (u) 324.888 128.782 t (t) 330.449 128.782 t (e) 333.227 128.782 t (n) 338.788
128.782 t (t) 344.349 128.782 t (i) 347.127 128.782 t (f) 349.349 128.782 t (i) 352.127 128.782 t (c)
354.349 128.782 t (a) 359.349 128.782 t (t) 364.910 128.782 t (i) 367.688 128.782 t (o) 369.910 128.782
t (n) 375.471 128.782 t ( ) 381.032 128.782 t (&) 383.810 128.782 t ( ) 390.480 128.782 t (A) 392.707
128.782 t (u) 399.377 128.782 t (t) 404.938 128.782 t (h) 407.716 128.782 t (o) 413.277 128.782 t (r)
418.838 128.782 t (i) 422.168 128.782 t (z) 424.390 128.782 t (a) 429.390 128.782 t (t) 434.951 128.782
t (i) 437.729 128.782 t (o) 439.951 128.782 t (n) 445.512 128.782 t (M) 239.468 111.032 t (y) 247.798
111.032 t ( ) 252.798 111.032 t (S) 255.576 111.032 t (p) 262.246 111.032 t (a) 267.807 111.032 t (c)
273.368 111.032 t (e) 278.368 111.032 t ( ) 283.929 111.032 t (s) 286.707 111.032 t (t) 291.707 111.032
t (o) 294.485 111.032 t (r) 300.046 111.032 t (a) 303.376 111.032 t (g) 308.937 111.032 t (e) 314.498
111.032 t ( ) 320.059 111.032 t (s) 322.837 111.032 t (e) 327.837 111.032 t (r) 333.398 111.032 t (v)
336.728 111.032 t (i) 341.728 111.032 t (c) 343.950 111.032 t (e) 348.950 111.032 t (D) 215.718 77.282
t (a) 222.940 77.282 t (t) 228.501 77.282 t (a) 231.279 77.282 t (b) 236.840 77.282 t (a) 242.401 77.282
t (s) 247.962 77.282 t (e) 252.962 77.282 t (s) 258.523 77.282 t (,) 263.523 77.282 t ( ) 266.301 77.282
t (P) 269.079 77.282 t (e) 275.749 77.282 t (r) 281.310 77.282 t (s) 284.640 77.282 t (i) 289.640 77.282
t (s) 291.862 77.282 t (t) 296.862 77.282 t (e) 299.640 77.282 t (n) 305.201 77.282 t (c) 310.762 77.282
t (y) 315.762 77.282 t (,) 320.021 77.282 t ( ) 322.799 77.282 t (R) 325.577 77.282 t (e) 332.799 77.282
t (p) 338.360 77.282 t (l) 343.921 77.282 t (i) 346.143 77.282 t (c) 348.365 77.282 t (a) 353.365 77.282
t (t) 358.926 77.282 t (i) 361.704 77.282 t (o) 363.926 77.282 t (n) 369.487 77.282 t (D) 235.468 54.532
t (i) 242.690 54.532 t (s) 244.912 54.532 t (k) 249.912 54.532 t (s) 254.912 54.532 t (,) 259.912 54.532
t ( ) 262.690 54.532 t (T) 265.288 54.532 t (a) 270.289 54.532 t (p) 275.850 54.532 t (e) 281.411 54.532
t (s) 286.972 54.532 t (,) 291.972 54.532 t ( ) 294.750 54.532 t (C) 297.528 54.532 t (P) 304.750 54.532
t (U) 311.420 54.532 t (s) 318.642 54.532 t (,) 323.642 54.532 t ( ) 326.420 54.532 t (F) 329.198 54.532
t (i) 335.306 54.532 t (b) 337.528 54.532 t (e) 343.089 54.532 t (r) 348.650 54.532 t (E) 116.218 99.532
t (x) 122.888 99.532 t (i) 127.888 99.532 t (s) 130.110 99.532 t (t) 135.110 99.532 t (i) 137.888 99.532
t (n) 140.110 99.532 t (g) 145.671 99.532 t ( ) 151.232 99.532 t (D) 154.010 99.532 t (a) 161.232 99.532
t (t) 166.793 99.532 t (a) 169.571 99.532 t ( ) 175.132 99.532 t (C) 177.910 99.532 t (e) 185.132 99.532
t (n) 190.693 99.532 t (t) 196.254 99.532 t (e) 199.032 99.532 t (r) 204.593 99.532 t (s) 207.923 99.532
t (G) 398.468 97.554 t (r) 406.246 97.554 t (i) 409.576 97.554 t (d) 411.798 97.554 t ( ) 417.359 97.554
t (M) 420.137 97.554 t (i) 428.467 97.554 t (d) 430.689 97.554 t (d) 436.250 97.554 t (l) 441.811 97.554
t (e) 444.033 97.554 t (w) 449.594 97.554 t (a) 456.816 97.554 t (r) 462.377 97.554 t (e) 465.707 97.554
t (D) 140.468 132.532 t (i) 147.690 132.532 t (g) 149.912 132.532 t (i) 155.473 132.532 t (t) 157.695
132.532 t (a) 160.473 132.532 t (l) 166.034 132.532 t ( ) 168.256 132.532 t (L) 171.034 132.532 t (i)
176.595 132.532 t (b) 178.817 132.532 t (r) 184.378 132.532 t (a) 187.708 132.532 t (r) 193.269 132.532
t (y) 196.599 132.532 t (A) 159.425 196.075 t (D) 166.095 196.075 t (S) 173.317 196.075 t 1 w
169.925 240.654 m
169.925 232.826 169.925 224.998 169.925 217.170 c
S
173.924 217.836 m
165.925 217.836 l
169.925 208.504 l
f
1.046 w
0 j
397.825 235.720 m
397.825 217.530 l
456.926 217.530 l
456.926 235.720 l
397.825 235.720 l
s
334.825 212.470 m
334.825 194.280 l
393.926 194.280 l
393.926 212.470 l
334.825 212.470 l
s
398.575 212.470 m
398.575 194.280 l
457.676 194.280 l
457.676 212.470 l
398.575 212.470 l
s
0.250 w
2 j
(V) 336.601 200.399 t (i) 343.091 200.399 t (s) 345.313 200.399 t (u) 350.313 200.399 t (a) 355.874 200.399
t (l) 361.435 200.399 t (i) 363.657 200.399 t (z) 365.879 200.399 t (a) 370.879 200.399 t (t) 376.440
200.399 t (i) 379.218 200.399 t (o) 381.440 200.399 t (n) 387.001 200.399 t (I) 413.101 200.399 t (m)
415.879 200.399 t (a) 424.209 200.399 t (g) 429.770 200.399 t (e) 435.331 200.399 t end restore
%%PageTrailer
showpage
%%Trailer
%%EOF
